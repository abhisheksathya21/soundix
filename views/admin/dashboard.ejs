<%- include('../partials/admin/header') %>

<main class="main-content" id="mainContent">
  <head>
    <link rel="stylesheet" href="/assets/admin-style/dashboard.css">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  </head>

  <body>
    <div class="dashboard-container">
      <header class="dashboard-header">
        <h1>Admin Dashboard</h1>
        <div class="filter-section">
          <label for="filter">Filter by:</label>
          <select id="filter">
            <option value="yearly">Yearly</option>
            <option value="monthly" selected>Monthly</option>
            <option value="weekly">Weekly</option>
            <option value="custom">Custom Range</option>
          </select>
          <div class="date-range" id="date-range">
            <input type="date" id="start-date" placeholder="Start Date">
            <input type="date" id="end-date" placeholder="End Date">
          </div>
          <button id="apply-filter" class="btn btn-primary">Apply Filter</button>
        </div>
      </header>

      <!-- Sales Overview Section -->
      <section class="dashboard-section">
        <div class="chart-card">
          <h2>Sales Overview</h2>
          <canvas id="salesChart"></canvas>
        </div>
      </section>

      <!-- Top Products Section -->
      <section class="dashboard-section">
        <div class="chart-card">
          <h2>Top Selling Products</h2>
          <canvas id="productsChart"></canvas>
        </div>
      </section>

      <!-- Top Categories Section -->
      <section class="dashboard-section">
        <div class="chart-card">
          <h2>Top Selling Categories</h2>
          <canvas id="categoriesChart"></canvas>
        </div>
      </section>
    </div>

    <script>
      let salesChart, productsChart, categoriesChart;

      function formatCurrency(amount) {
        return new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(amount || 0);
      }

      // Common Chart Options
      const commonOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { position: 'top', labels: { color: '#333', font: { size: 16, family: 'Arial' } } },
          tooltip: {
            backgroundColor: 'rgba(0, 0, 0, 0.8)',
            titleFont: { size: 16 },
            bodyFont: { size: 14 },
            padding: 10,
          },
        },
        animation: {
          duration: 1000,
          easing: 'easeOutQuart',
        },
      };

      async function fetchDashboardData(filter = 'monthly', startDate = '', endDate = '') {
        try {
          const params = { filter };
          if (filter === 'custom' && startDate && endDate) {
            params.startDate = startDate;
            params.endDate = endDate;
          }

          const response = await axios.get('/admin/dashboard/data', { params });
          const { chartData, topProducts, topCategories } = response.data;

          // Destroy existing charts
          if (salesChart) salesChart.destroy();
          if (productsChart) productsChart.destroy();
          if (categoriesChart) categoriesChart.destroy();

          // Sales Chart (Bar)
          const salesCtx = document.getElementById('salesChart').getContext('2d');
          salesChart = new Chart(salesCtx, {
            type: 'bar',
            data: {
              labels: chartData.labels,
              datasets: [{
                label: 'Sales (₹)',
                data: chartData.data,
                backgroundColor: 'rgba(76, 175, 80, 0.85)',
                borderColor: 'rgba(56, 142, 60, 1)',
                borderWidth: 2,
                hoverBackgroundColor: 'rgba(76, 175, 80, 1)',
                barThickness: 40,
              }],
            },
            options: {
              ...commonOptions,
              scales: {
                y: {
                  beginAtZero: true,
                  ticks: { color: '#555', font: { size: 14 } },
                  grid: { color: '#e8ecef' },
                  title: { display: true, text: 'Sales Amount (₹)', color: '#333', font: { size: 16 } },
                },
                x: {
                  ticks: { color: '#555', font: { size: 14 }, maxRotation: 45, minRotation: 45 },
                  grid: { display: false },
                  title: { display: true, text: filter === 'custom' ? 'Custom Range' : filter.charAt(0).toUpperCase() + filter.slice(1), color: '#333', font: { size: 16 } },
                },
              },
            },
          });

          // Products Chart (Horizontal Bar)
          const productsCtx = document.getElementById('productsChart').getContext('2d');
          productsChart = new Chart(productsCtx, {
            type: 'bar',
            data: {
              labels: topProducts.map(p => p.name),
              datasets: [{
                label: 'Units Sold',
                data: topProducts.map(p => p.totalSold),
                backgroundColor: 'rgba(33, 150, 243, 0.85)',
                borderColor: 'rgba(25, 118, 210, 1)',
                borderWidth: 2,
                hoverBackgroundColor: 'rgba(33, 150, 243, 1)',
              }],
            },
            options: {
              ...commonOptions,
              indexAxis: 'y',
              scales: {
                x: {
                  beginAtZero: true,
                  ticks: { color: '#555', font: { size: 14 } },
                  grid: { color: '#e8ecef' },
                  title: { display: true, text: 'Units Sold', color: '#333', font: { size: 16 } },
                },
                y: {
                  ticks: { color: '#555', font: { size: 14 } },
                  grid: { display: false },
                  title: { display: true, text: 'Products', color: '#333', font: { size: 16 } },
                },
              },
            },
          });

          // Categories Chart (Doughnut)
          const categoriesCtx = document.getElementById('categoriesChart').getContext('2d');
          categoriesChart = new Chart(categoriesCtx, {
            type: 'doughnut',
            data: {
              labels: topCategories.map(c => c.name),
              datasets: [{
                label: 'Units Sold',
                data: topCategories.map(c => c.totalSold),
                backgroundColor: [
                  'rgba(244, 67, 54, 0.85)',
                  'rgba(255, 152, 0, 0.85)',
                  'rgba(255, 235, 59, 0.85)',
                  'rgba(76, 175, 80, 0.85)',
                  'rgba(33, 150, 243, 0.85)',
                  'rgba(156, 39, 176, 0.85)',
                  'rgba(0, 188, 212, 0.85)',
                  'rgba(233, 30, 99, 0.85)',
                  'rgba(121, 85, 72, 0.85)',
                  'rgba(158, 158, 158, 0.85)',
                ],
                borderColor: '#fff',
                borderWidth: 3,
                hoverOffset: 15,
              }],
            },
            options: {
              ...commonOptions,
              cutout: '50%',
            },
          });
        } catch (error) {
          console.error('Error fetching dashboard data:', error);
          alert('Failed to load dashboard data');
        }
      }

      document.addEventListener('DOMContentLoaded', () => {
        const filterSelect = document.getElementById('filter');
        const dateRangeDiv = document.getElementById('date-range');
        const startDateInput = document.getElementById('start-date');
        const endDateInput = document.getElementById('end-date');

        // Set max date to today
        const today = new Date().toISOString().split('T')[0];
        startDateInput.max = today;
        endDateInput.max = today;

        // Initially hide date range inputs
        dateRangeDiv.style.display = 'none';

        // Show/hide date range based on filter selection
        filterSelect.addEventListener('change', () => {
          const isCustom = filterSelect.value === 'custom';
          dateRangeDiv.style.display = isCustom ? 'flex' : 'none';
          if (!isCustom) {
            startDateInput.value = '';
            endDateInput.value = '';
          }
        });

        // Initial load with default filter (monthly)
        fetchDashboardData();

        // Apply filter on button click
        document.getElementById('apply-filter').addEventListener('click', () => {
          const filter = filterSelect.value;
          const startDate = startDateInput.value;
          const endDate = endDateInput.value;

          if (filter === 'custom') {
            if (!startDate || !endDate) {
              alert('Please select both start and end dates for custom range.');
              return;
            }
            if (new Date(endDate) < new Date(startDate)) {
              alert('End date must be after start date.');
              return;
            }
          }
          fetchDashboardData(filter, startDate, endDate);
        });
      });
    </script>
  </body>
</main>

<%- include('../partials/admin/footer') %>