<%- include('../partials/admin/header') %>

<main class="main-content" id="mainContent">
    <head>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
        <link rel="stylesheet" href="/assets/admin-style/style.css">
    </head>

    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="card mb-4">
                    <div class="card-body">
                        <form id="addProductForm" method="post" action="/admin/addProducts" enctype="multipart/form-data">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName" class="form-control" id="product_name">
                                <div id="productName-error" class="error-message"></div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control" rows="4"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular price</label>
                                        <input placeholder="" name="regularPrice" type="number" step="0.01" class="form-control">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale price</label>
                                        <input placeholder=" " name="salePrice" type="number" step="0.01" class="form-control">
                                        <div id="salePrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Quantity</label>
                                        <input placeholder="" name="quantity" type="number" class="form-control">
                                        <div id="quantity-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Category</label>
                                <select class="form-select" name="category">
                                    <option value="">Choose a category</option>
                                    <% locals.Category.forEach(element => { %>
                                        <option value="<%= element.name %>"><%= element.name %></option>
                                    <% }) %>
                                </select>
                                <div id="category-error" class="error-message"></div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Product Images</label>
                                <div class="image-upload-container" id="dropZone">
                                    <p>Drag & drop images here or click to select</p>
                                    <input type="file" id="fileInput" name="images" multiple accept="image/*" style="display: none;">
                                </div>
                                <div class="image-preview-container" id="imagePreviewContainer"></div>
                                <div id="images-error" class="error-message"></div>
                            </div>
                            <div>
                                <button class="btn btn-primary" type="submit">Publish</button>
                                <button type="button" class="btn btn-secondary" id="cancelButton">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <div id="cropperContainer" class="cropper-container" style="display: none;">
        <div class="cropper-content">
            <img id="cropperImage" src="" alt="Image to crop" style="max-width: 100%; display: block;">
            <div class="mt-4">
                <button id="cropButton" class="btn btn-primary mr-2">Crop & Save</button>
                <button id="cancelCropButton" class="btn btn-secondary">Cancel</button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
    <script>
        document.getElementById("cancelButton").addEventListener("click", function() {
            window.location.href = '/admin/products';
        });

        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('addProductForm');
            const dropZone = document.getElementById('dropZone');
            const fileInput = document.getElementById('fileInput');
            const imagePreviewContainer = document.getElementById('imagePreviewContainer');
            const cropperContainer = document.getElementById('cropperContainer');
            const cropperImage = document.getElementById('cropperImage');
            const cropButton = document.getElementById('cropButton');
            const cancelCropButton = document.getElementById('cancelCropButton');
            let cropper;
            let currentFileIndex;
            const maxImages = 6;
            const croppedImages = [];

            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, preventDefaults, false);
            });

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            ['dragenter', 'dragover'].forEach(eventName => {
                dropZone.addEventListener(eventName, highlight, false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, unhighlight, false);
            });

            function highlight() {
                dropZone.classList.add('border-blue-500');
            }

            function unhighlight() {
                dropZone.classList.remove('border-blue-500');
            }

            dropZone.addEventListener('drop', handleDrop, false);

            function handleDrop(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                console.log('Dropped files:', files.length);
                handleFiles(files);
            }

            dropZone.addEventListener('click', () => fileInput.click());

            fileInput.addEventListener('change', (e) => {
                console.log('Selected files:', e.target.files.length);
                handleFiles(e.target.files);
            });

            function handleFiles(files) {
                console.log('Handling files, current croppedImages length:', croppedImages.length);
                if (croppedImages.length + files.length > maxImages) {
                    alert(`You can only upload a maximum of ${maxImages} images.`);
                    return;
                }
                [...files].forEach((file, index) => {
                    if (file.type.startsWith('image/')) {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            console.log('File read, index:', croppedImages.length + index);
                            showCropper(e.target.result, croppedImages.length + index);
                        };
                        reader.readAsDataURL(file);
                    }
                });
            }

            function showCropper(imageSrc, index) {
                console.log('Showing cropper for index:', index);
                cropperImage.src = imageSrc;
                cropperContainer.style.display = 'flex';
                currentFileIndex = index;
                if (cropper) {
                    cropper.destroy();
                }
                cropper = new Cropper(cropperImage, {
                    aspectRatio: 1,
                    viewMode: 1,
                    minCropBoxWidth: 400,
                    minCropBoxHeight: 400,
                    ready: function() {
                        this.cropper.setCropBoxData({
                            width: Math.min(this.cropper.getContainerData().width, 500),
                            height: Math.min(this.cropper.getContainerData().height, 500)
                        });
                    }
                });
            }

            cropButton.addEventListener('click', () => {
                console.log('Cropping image, currentFileIndex:', currentFileIndex);
                const croppedImageData = cropper.getCroppedCanvas().toDataURL();
                croppedImages[currentFileIndex] = croppedImageData;
                console.log('croppedImages after crop:', croppedImages.length);
                updateImagePreviews();
                closeCropper();
            });

            cancelCropButton.addEventListener('click', closeCropper);

            function closeCropper() {
                console.log('Closing cropper');
                cropperContainer.style.display = 'none';
                cropper.destroy();
                cropper = null;
            }

            function updateImagePreviews() {
                console.log('Updating previews, croppedImages length:', croppedImages.length);
                imagePreviewContainer.innerHTML = '';
                croppedImages.forEach((imageSrc, index) => {
                    const previewElement = document.createElement('div');
                    previewElement.className = 'image-preview';
                    previewElement.innerHTML = `
                        <img src="${imageSrc}" alt="Product image ${index + 1}">
                        <button type="button" class="remove-image" data-index="${index}">×</button>
                    `;
                    imagePreviewContainer.appendChild(previewElement);
                });
            }

            imagePreviewContainer.addEventListener('click', (e) => {
                if (e.target.classList.contains('remove-image')) {
                    const index = parseInt(e.target.dataset.index);
                    console.log('Removing image at index:', index);
                    croppedImages.splice(index, 1);
                    console.log('croppedImages after removal:', croppedImages.length);
                    updateImagePreviews();
                }
            });

            form.addEventListener('submit', (e) => {
                e.preventDefault();
                console.log("Form submission triggered");
                if (validateForm()) {
                    console.log("Validation successful");
                    const formData = new FormData();
                    formData.append('productName', document.getElementById('product_name').value.trim());
                    formData.append('description', document.getElementById('descriptionid').value.trim());
                    formData.append('regularPrice', document.querySelector('input[name="regularPrice"]').value);
                    formData.append('salePrice', document.querySelector('input[name="salePrice"]').value);
                    formData.append('quantity', document.querySelector('input[name="quantity"]').value);
                    formData.append('category', document.querySelector('select[name="category"]').value);

                    console.log('croppedImages length before submission:', croppedImages.length);
                    console.log('croppedImages:', croppedImages);
                    const uploadPromises = croppedImages.map((imageSrc, index) => {
                        console.log('Processing image for FormData, index:', index);
                        return fetch(imageSrc)
                            .then(res => res.blob())
                            .then(blob => {
                                formData.append('images', blob, `image${index + 1}.png`);
                            });
                    });

                    Promise.all(uploadPromises).then(() => {
                        console.log('FormData contents:');
                        for (let [key, value] of formData.entries()) {
                            console.log(`${key}:`, value);
                        }

                        fetch(form.action, {
                            method: 'POST',
                            body: formData
                        })
                            .then(response => {
                                console.log('Fetch response status:', response.status);
                                if (response.ok) {
                                    response.json().then((data) => {
                                        Swal.fire({
                                            title: "Success!",
                                            text: "Product added successfully!",
                                            icon: "success",
                                            confirmButtonText: "OK",
                                        }).then(() => {
                                            window.location.href = '/admin/products';
                                        });
                                    });
                                } else {
                                    response.json().then((data) => {
                                        Swal.fire({
                                            title: "Error!",
                                            text: data.message || "Something went wrong. Please try again.",
                                            icon: "error",
                                            confirmButtonText: "OK",
                                        });
                                    });
                                }
                            })
                            .catch((error) => {
                                console.error("Error submitting form:", error);
                                Swal.fire({
                                    title: "Error!",
                                    text: "An unexpected error occurred. Please try again.",
                                    icon: "error",
                                    confirmButtonText: "OK",
                                });
                            });
                    });
                }
            });

            function validateForm() {
                let isValid = true;
                const errorElements = document.querySelectorAll('.error-message');
                errorElements.forEach(el => el.textContent = '');

                const productName = document.getElementById('product_name').value.trim();
                if (!productName) {
                    document.getElementById('productName-error').textContent = 'Product name is required.';
                    isValid = false;
                }

                const description = document.getElementById('descriptionid').value.trim();
                if (!description) {
                    document.getElementById('description-error').textContent = 'Description is required.';
                    isValid = false;
                }

                const regularPrice = document.querySelector('input[name="regularPrice"]').value;
                if (!regularPrice || isNaN(regularPrice) || Number(regularPrice) <= 0) {
                    document.getElementById('regularPrice-error').textContent = 'Enter a valid price.';
                    isValid = false;
                }

                const salePrice = document.querySelector('input[name="salePrice"]').value;
                if (!salePrice || (isNaN(salePrice) || Number(salePrice) < 0)) {
                    document.getElementById('salePrice-error').textContent = 'Enter a valid sale price.';
                    isValid = false;
                }

                const quantity = document.querySelector('input[name="quantity"]').value;
                if (!quantity || isNaN(quantity) || Number(quantity) <= 0) {
                    document.getElementById('quantity-error').textContent = 'Enter a valid quantity.';
                    isValid = false;
                }

                const category = document.querySelector('select[name="category"]').value;
                if (!category) {
                    document.getElementById('category-error').textContent = 'Please select a category.';
                    isValid = false;
                }

                if (croppedImages.length < 1) {
                    document.getElementById('images-error').textContent = 'Please upload at least one image.';
                    isValid = false;
                }

                return isValid;
            }
        });

        window.addEventListener('resize', function () {
            if (cropper) {
                const containerData = cropper.getContainerData();
                cropper.setCropBoxData({
                    width: Math.min(containerData.width, 300),
                    height: Math.min(containerData.height, 300),
                });
            }
        });
    </script>
</main>

<%- include('../partials/admin/footer') %>