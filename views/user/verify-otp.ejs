<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Email Verification Template" />
    <meta name="keywords" content="Email Verification, OTP" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Email Verification</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700;800;900&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="/assets/user-style/verify-otp.css" />
    
  </head>
  <body>
    <div class="content">
      <div class="container">
        <div class="heading_s1">
          <h3>Email Verification</h3>
        </div>
        <form id="otpForm" action="/verify-otp" method="post">
          <div class="form-group">
            <label for="otp-1" class="form-label">Enter OTP:</label>
            <div class="otp-input-container">
              <input
                type="text"
                id="otp-1"
                class="otp-input"
                maxlength="1"
                pattern="\d"
                required
              />
              <input
                type="text"
                id="otp-2"
                class="otp-input"
                maxlength="1"
                pattern="\d"
                required
              />
              <input
                type="text"
                id="otp-3"
                class="otp-input"
                maxlength="1"
                pattern="\d"
                required
              />
              <input
                type="text"
                id="otp-4"
                class="otp-input"
                maxlength="1"
                pattern="\d"
                required
              />
              <input
                type="text"
                id="otp-5"
                class="otp-input"
                maxlength="1"
                pattern="\d"
                required
              />
              <input
                type="text"
                id="otp-6"
                class="otp-input"
                maxlength="1"
                pattern="\d"
                required
              />
            </div>
          </div>
          <button type="submit" class="btn btn-primary">Verify Email</button>
          <div class="otp-timer">
            OTP expires in: <span id="timerValue">60</span> seconds
          </div>
          <button type="button" class="btn btn-secondary" id="resendBtn" disabled>
            Resend OTP
          </button>
        </form>
        <div class="text-muted">
          Already verified? <a href="/login">Login now</a>
        </div>
      </div>
    </div>

    <script src="/assets/js/preloader.js"></script>
    <script>
      function showToast(message, type = 'success') {
        let toastContainer = document.querySelector('.toast-container');
        if (!toastContainer) {
          toastContainer = document.createElement('div');
          toastContainer.className = 'toast-container';
          document.body.appendChild(toastContainer);
        }

        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        const icon = document.createElement('span');
        icon.className = 'toast-icon';
        icon.innerHTML = type === 'success' ? '✓' : '✗';
        const text = document.createElement('span');
        text.textContent = message;

        toast.appendChild(icon);
        toast.appendChild(text);
        toastContainer.appendChild(toast);

        setTimeout(() => {
          toast.classList.add('show');
        }, 100);

        setTimeout(() => {
          toast.classList.remove('show');
          setTimeout(() => {
            toast.remove();
          }, 300);
        }, 5000);
      }

      document.addEventListener("DOMContentLoaded", function () {
        // Handle initial message from signup redirect
        <% if (locals.message && message.length > 0) { %>
          setTimeout(() => {
            showToast("<%= locals.message %>", "<%= locals.icon === 'success' ? 'success' : 'error' %>");
          }, 1000);
        <% } %>

        const otpInputs = document.querySelectorAll(".otp-input");
        const timerValue = document.getElementById("timerValue");
        const resendBtn = document.getElementById("resendBtn");
        let timer = 60;
        let timerInterval;

        otpInputs[0].focus();

        function startTimer() {
          timerInterval = setInterval(() => {
            timer--;
            timerValue.textContent = timer;
            if (timer <= 0) {
              clearInterval(timerInterval);
              otpInputs.forEach((input) => (input.disabled = true));
              timerValue.textContent = "Expired";
              resendBtn.disabled = false;
            }
          }, 1000);
        }

        function resetTimer() {
          clearInterval(timerInterval);
          timer = 60;
          timerValue.textContent = timer;
          otpInputs.forEach((input) => {
            input.disabled = false;
            input.value = "";
          });
          resendBtn.disabled = true;
          otpInputs[0].focus();
          startTimer();
        }

        startTimer();

        otpInputs.forEach((input, index) => {
          input.addEventListener("input", (e) => {
            if (input.value.length === 1) {
              const nextInput = otpInputs[index + 1];
              if (nextInput) nextInput.focus();
            }
          });

          input.addEventListener("keydown", (e) => {
            if (e.key === "Backspace" && input.value === "") {
              const previousInput = otpInputs[index - 1];
              if (previousInput) previousInput.focus();
            }
          });
        });

        document.getElementById("otpForm").addEventListener("submit", async function (e) {
          e.preventDefault();
          const otpValue = Array.from(otpInputs)
            .map((input) => input.value)
            .join("");

          try {
            const response = await fetch("/verify-otp", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ otpInput: otpValue }),
            });

            const result = await response.json();
            if (response.ok && result.success) {
              showToast("OTP Verified Successfully", "success");
              setTimeout(() => {
                window.location.href = result.redirectUrl || "/";
              }, 2000);
            } else {
              showToast(result.message || "Invalid OTP. Please try again.", "error");
            }
          } catch (error) {
            showToast("Something went wrong. Please try again.", "error");
          }
        });

        resendBtn.addEventListener("click", async function () {
          try {
            const response = await fetch("/resend-otp", {
              method: "POST",
            });

            const result = await response.json();
            if (response.ok && result.success) {
              showToast("OTP Resent Successfully", "success");
              resetTimer();
            } else {
              showToast(
                result.message || "An error occurred resending OTP. Please try again.",
                "error"
              );
            }
          } catch (error) {
            showToast("An error occurred resending OTP. Please try again.", "error");
          }
        });
      });
    </script>
  </body>
</html>