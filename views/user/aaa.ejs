<script>
    document.addEventListener("DOMContentLoaded", () => {
const MAX_QUANTITY = 5;
const removeButtons = document.querySelectorAll(".remove-btn");
const quantityButtons = document.querySelectorAll(".quantity-btn");


const showToast = (message, type = 'success') => {
const toastContainer = document.querySelector('.toast-container');

const toast = document.createElement('div');
toast.className = `toast ${type}`;

let icon;
switch(type) {
    case 'success':
        icon = 'check-circle';
        break;
    case 'error':
        icon = 'exclamation-circle';
        break;
    case 'warning':
        icon = 'exclamation-triangle';
        break;
    default:
        icon = 'info-circle';
}

toast.innerHTML = `
    <i class="fas fa-${icon} toast-icon"></i>
    <span>${message}</span>
`;

toastContainer.appendChild(toast);

// Trigger reflow
toast.offsetHeight;

// Show toast
setTimeout(() => toast.classList.add('show'), 10);


setTimeout(() => {
    toast.classList.remove('show');
    setTimeout(() => toast.remove(), 300);
}, 3000);
};


const formatPrice = (price) => {
return parseFloat(price).toLocaleString('en-IN', {
  maximumFractionDigits: 2,
  minimumFractionDigits: 0
});
};

const updateSummaryAmounts = (newTotal) => {
const subtotalElement = document.querySelector('.subtotal');
const totalElement = document.querySelector('.total-amount');

const formattedTotal = formatPrice(newTotal);
if (subtotalElement && totalElement) {
  subtotalElement.textContent = `₹${formattedTotal}`;
  totalElement.textContent = `₹${formattedTotal}`;
}
};


const validateCart = async () => {
try {
  const response = await fetch('/validate-cart');
  const data = await response.json();
  
  if (!data.valid) {
    // Display warnings to user
    data.warnings.forEach(warning => {
      showToast(warning.message, 'warning');
    });
    return false;
  }
  return true;
} catch (error) {
  console.error('Error validating cart:', error);
  showToast('Unable to validate cart', 'error');
  return false;
}
};


removeButtons.forEach((button) => {
button.addEventListener("click", async (event) => {
  const productId = button.getAttribute("data-product-id");
  const cartItem = button.closest('.cart-item');
  const productName = cartItem.querySelector('h3').textContent;
  
  const result = await Swal.fire({
    title: 'Remove Item?',
    text: `Are you sure you want to remove "${productName}" from your cart?`,
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#d33',
    cancelButtonColor: '#3085d6',
    confirmButtonText: 'Yes, remove it!',
    cancelButtonText: 'No, keep it',
    reverseButtons: true
  });
  
  if (result.isConfirmed) {
    try {
      button.disabled = true;
      button.textContent = 'Removing...';
      
      const response = await fetch("/removeCart", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ productId }),
      });
      
      const data = await response.json();
      
      if (data.success) {
        cartItem.remove();
        
        
        if (data.cart && data.cart.totalAmount !== undefined) {
          updateSummaryAmounts(data.cart.totalAmount);
        }
        
        showToast('Item removed from cart', 'success');
        
        const remainingItems = document.querySelectorAll('.cart-item');
        if (remainingItems.length === 0) {
          location.reload();
        }
      } else {
        showToast(data.message || 'Failed to remove item', 'error');
        button.disabled = false;
        button.textContent = 'Remove';
      }
    } catch (error) {
      console.error("Error removing product:", error);
      showToast('Failed to remove item. Please try again', 'error');
      button.disabled = false;
      button.textContent = 'Remove';
    }
  }
});
});


quantityButtons.forEach((button) => {
button.addEventListener("click", async (event) => {
  const productId = button.getAttribute("data-product-id");
  const action = button.classList.contains('increase-btn') ? '+' : '-';
  const quantityDisplay = document.getElementById(`quantity-${productId}`);
  let currentQuantity = parseInt(quantityDisplay.textContent);

  if (action === "+" || action === "+") {
    if (currentQuantity >= MAX_QUANTITY) {
      showToast(`Maximum quantity allowed is ${MAX_QUANTITY}`, 'warning');
      return;
    }
    currentQuantity++;
  } else if ((action === "-" || action === "-") && currentQuantity > 1) {
    currentQuantity--;
  } else if (currentQuantity <= 1) {
    showToast('Minimum quantity must be 1', 'warning');
    return;
  }

  try {
    button.disabled = true;
    button.style.opacity = "0.5";

    const response = await fetch("/updateQuantity", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ productId, quantity: currentQuantity }),
    });

    const result = await response.json();

    if (response.ok && result.success) {
      quantityDisplay.textContent = currentQuantity;
      
      
      if (result.cart && result.cart.totalAmount !== undefined) {
        updateSummaryAmounts(result.cart.totalAmount);
      }
      
      showToast('Quantity updated successfully', 'success');
    } else {
      showToast(result.message || 'Failed to update quantity', 'error');
    }
  } catch (error) {
    console.error("Error updating quantity:", error);
    showToast('Failed to update quantity. Please try again', 'error');
  } finally {
    button.disabled = false;
    button.style.opacity = "1";
  }
});
});


const checkoutBtn = document.querySelector('.checkout-btn');
if (checkoutBtn) {
checkoutBtn.addEventListener('click', async function(e) {
  e.preventDefault();
  const isValid = await validateCart();
  if (isValid) {
    window.location.href = '/checkout';
  }
});
}


});
   </script>