<%- include('../partials/user/header')%>
<link
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
  rel="stylesheet"
/>
<link
  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
  rel="stylesheet"
/>

<style></style>
<ol class="breadcrumb">
  <% breadcrumbs.forEach(function(crumb, index) { %> <% if (index ===
  breadcrumbs.length - 1) { %>
  <li class="breadcrumb-item active" aria-current="page"><%= crumb.name %></li>
  <% } else { %>
  <li class="breadcrumb-item">
    <a href="<%= crumb.url %>"><%= crumb.name %></a>
  </li>
  <% } %> <% }); %>
</ol>

<link rel="stylesheet" href="/user-style/product-details.css" />
<div class="product-container">
  <!-- Thumbnails -->
  <div class="thumbnails">
    <div class="thumbnail">
      <img
        src="<%=product.productImage[0]%>"
        alt="Beats Studio Pro front view"
        onclick="updateMainImage('<%=product.productImage[0]%>')"
      />
    </div>
    <div class="thumbnail">
      <img
        src="<%=product.productImage[2]%>"
        alt="Beats Studio Pro 3D view"
        onclick="updateMainImage('<%=product.productImage[2]%>')"
      />
    </div>
    <div class="thumbnail">
      <img
        src="<%=product.productImage[3]%>"
        alt="Beats Studio Pro side view"
        onclick="updateMainImage('<%=product.productImage[3]%>')"
      />
    </div>
    <div class="thumbnail">
      <img
        src="<%=product.productImage[1]%>"
        alt="Beats Studio Pro folded view"
        onclick="updateMainImage('<%=product.productImage[1]%>')"
      />
    </div>
  </div>

  <!-- Main Image -->
  <div class="main-image">
    <div class="zoom-container">
      <img
        id="mainImage"
        src="<%=product.productImage[0]%>"
        alt="Beats Studio Pro"
      />
    </div>
  </div>

  <!-- Product Info -->
  <div class="product-info">
    <span class="sale-badge">SALE</span>
    <h1 class="product-title"><b><%=product.productName%></b></h1>
    <p class="product-subtitle"><%=product.description%></p>

    <div class="price">
      Rs. <%=product.salePrice%>
      <span class="original-price"><%=product.regularPrice%></span>
    </div>
    <div class="stock">In Stock <%=product.quantity%></div>

    <button
      class="add-to-cart"
      data-product-id="<%= product._id %>"
      data-price="<%= product.salePrice %>"
    >
      <i class="fas fa-shopping-cart"></i> Add to Cart
    </button>

    <div class="rating-container">
      <div class="stars" role="radiogroup" aria-label="Product rating">
        <svg
          class="star"
          viewBox="0 0 24 24"
          aria-hidden="true"
          data-rating="1"
        >
          <path
            d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"
          />
        </svg>
        <svg
          class="star"
          viewBox="0 0 24 24"
          aria-hidden="true"
          data-rating="2"
        >
          <path
            d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"
          />
        </svg>
        <svg
          class="star"
          viewBox="0 0 24 24"
          aria-hidden="true"
          data-rating="3"
        >
          <path
            d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"
          />
        </svg>
        <svg
          class="star"
          viewBox="0 0 24 24"
          aria-hidden="true"
          data-rating="4"
        >
          <path
            d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"
          />
        </svg>
        <svg
          class="star"
          viewBox="0 0 24 24"
          aria-hidden="true"
          data-rating="5"
        >
          <path
            d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"
          />
        </svg>
      </div>
      <p class="rating-text" aria-live="polite"><b>Rate this product</b></p>
    </div>

    <div class="features-list">
      <div class="feature-item">
        <svg
          class="feature-icon"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <path d="M5 12h14M12 5l7 7-7 7" />
        </svg>
        <div class="feature-text">
          Free Shipping and Returns
          <small>Enjoy free 2-day delivery and 14-day returns.</small>
        </div>
      </div>
      <div class="feature-item">
        <svg
          class="feature-icon"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <path d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16" />
        </svg>
        <div class="feature-text">
          In-Store Pickup
          <small>Pick up your Beats at an Apple Store near you.</small>
        </div>
      </div>
      <div class="feature-item">
        <svg
          class="feature-icon"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <path d="M9 18V5l12-2v13" />
          <circle cx="6" cy="18" r="3" />
          <circle cx="18" cy="16" r="3" />
        </svg>
        <div class="feature-text">
          Free Apple Music Trial
          <small
            >Get 3 months of access to over 100 million songs, ad-free.</small
          >
        </div>
      </div>
    </div>
  </div>
</div>
<!-- Related Products Section -->

<section class="popular-items latest-padding">
  <div class="container">
    <div class="row product-btn justify-content-between mb-40">
      <div class="properties__button"></div>

      <!-- Select items -->
    </div>
    <!-- Nav Card -->
    <div class="tab-content" id="nav-tabContent">
      <!-- card one -->
      <div class="section-tittle mb-70">
        <h2>Related Products</h2>
      </div>
      <div
        class="tab-pane fade show active"
        id="nav-home"
        role="tabpanel"
        aria-labelledby="nav-home-tab"
      >
        <div class="rp-row">
          <% for (i = 0; i < RelatedProducts.length; i++) { %>
          <div class="rp-col">
            <div class="rp-product-card">
              <div class="rp-product-img-wrapper">
                <img
                  src="<%= RelatedProducts[i].productImage[0] %>"
                  alt="<%= RelatedProducts[i].productName %>"
                  class="rp-product-img"
                />
                <div class="rp-product-actions">
                  <button
                    class="rp-add-to-cart"
                    data-product-id="<%= RelatedProducts[i]._id %>"
                    data-price="<%= RelatedProducts[i].salePrice %>"
                  >
                    Add to cart
                  </button>
                  <button class="rp-wishlist-btn">
                    <span class="rp-heart-icon"></span>
                  </button>
                </div>
              </div>
              <div class="rp-product-info">
                <h3 class="rp-product-name">
                  <a href="/productDetails?id=<%= RelatedProducts[i]._id %>"
                    ><%= RelatedProducts[i].productName %></a
                  >
                </h3>
                <span class="rp-product-price"
                  >â‚¹<%= RelatedProducts[i].salePrice %></span
                >
              </div>
            </div>
          </div>
          <% } %>
        </div>
      </div>
    </div>
    <!-- End Nav Card -->
  </div>
</section>

<!-- Include SweetAlert2 -->
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css"
/>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Get the add to cart button
    const addToCartButton = document.querySelector(".add-to-cart");
    if (addToCartButton) {
      addToCartButton.addEventListener("click", async function (e) {
        try {
          const productId = this.getAttribute("data-product-id");
          const price = parseFloat(this.getAttribute("data-price"));

          const response = await fetch("/cart-add", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              productId,
              price,
              quantity: 1, // You can modify this if you add a quantity selector
            }),
          });

          const result = await response.json();

          if (!response.ok) {
            throw new Error(result.error || "Failed to add to cart");
          }

          // Show success message
          Swal.fire({
            position: "center",
            icon: "success",
            title: "Success!",
            text: "Product added to cart successfully!",
            showConfirmButton: true,
            confirmButtonText: "OK",
          });

          // Update cart count in header if you have one
          updateCartCount(result.items.length);
        } catch (error) {
          console.error("Error adding to cart:", error);

          Swal.fire({
            icon: "error",
            title: "Failed!",
            text: error.message,
            position: "center",
            showConfirmButton: true,
            confirmButtonText: "OK",
          });
        }
      });
    }

    // Optional: Function to update cart count in header
    function updateCartCount(count) {
      const cartCountElement = document.querySelector(".cart-count");
      if (cartCountElement) {
        cartCountElement.textContent = count;
      }
    }
  });
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
  // Get all related product "Add to Cart" buttons
  const relatedProductButtons = document.querySelectorAll(".rp-add-to-cart");

  // Add event listeners to each related product button
  relatedProductButtons.forEach(button => {
    button.addEventListener("click", async function(e) {
      try {
        const productId = this.getAttribute("data-product-id");
        const price = parseFloat(this.getAttribute("data-price"));

        const response = await fetch("/cart-add", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            productId,
            price,
            quantity: 1
          }),
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || "Failed to add to cart");
        }

        // Show success message
        Swal.fire({
          position: "center",
          icon: "success",
          title: "Success!",
          text: "Product added to cart successfully!",
          showConfirmButton: true,
          confirmButtonText: "OK",
        });

        // Update cart count in header if you have one
        const cartCountElement = document.querySelector(".cart-count");
        if (cartCountElement) {
          cartCountElement.textContent = result.items.length;
        }

      } catch (error) {
        console.error("Error adding to cart:", error);
        
        Swal.fire({
          icon: "error",
          title: "Failed!",
          text: error.message,
          position: "center",
          showConfirmButton: true,
          confirmButtonText: "OK",
        });
      }
    });
  });
});
</script>

<script>
  function updateMainImage(imageSrc) {
    // Get the main image element
    const mainImage = document.getElementById("mainImage");
    // Update the src attribute with the clicked thumbnail's src
    mainImage.src = imageSrc;
  }

  // Simple thumbnail click handler
  document.querySelectorAll(".thumbnail").forEach((thumb) => {
    thumb.addEventListener("click", () => {
      // In a real implementation, this would switch the main image
      console.log("Thumbnail clicked");
    });
  });

  // Simple color swatch selection
  document.querySelectorAll(".color-swatch").forEach((swatch) => {
    swatch.addEventListener("click", () => {
      document
        .querySelectorAll(".color-swatch")
        .forEach((s) => s.classList.remove("selected"));
      swatch.classList.add("selected");
    });
  });

  //Image zoom

  const zoomContainer = document.querySelector(".zoom-container");
  const mainImage = document.getElementById("mainImage");

  zoomContainer.addEventListener("mousemove", (event) => {
    const rect = zoomContainer.getBoundingClientRect();
    const x = event.clientX - rect.left; // X position inside the element
    const y = event.clientY - rect.top; // Y position inside the element

    const xPercent = (x / rect.width) * 100;
    const yPercent = (y / rect.height) * 100;

    mainImage.style.transformOrigin = `${xPercent}% ${yPercent}%`;
    mainImage.style.transform = "scale(1.5)";
  });

  zoomContainer.addEventListener("mouseleave", () => {
    mainImage.style.transformOrigin = "center center";
    mainImage.style.transform = "scale(1)";
  });
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const stars = document.querySelectorAll(".star");
    const ratingText = document.querySelector(".rating-text");
    let currentRating = 0;

    stars.forEach((star) => {
      star.addEventListener("click", () => {
        const rating = parseInt(star.getAttribute("data-rating"));
        setRating(rating);
      });

      star.addEventListener("keydown", (e) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          const rating = parseInt(star.getAttribute("data-rating"));
          setRating(rating);
        }
      });
    });

    function setRating(rating) {
      currentRating = rating;
      stars.forEach((star, index) => {
        if (index < rating) {
          star.classList.add("active");
          star.setAttribute("aria-checked", "true");
        } else {
          star.classList.remove("active");
          star.setAttribute("aria-checked", "false");
        }
      });
      updateRatingText();
    }

    function updateRatingText() {
      const ratingTexts = [
        "Rate this product",
        "Poor",
        "Fair",
        "Average",
        "Good",
        "Excellent",
      ];
      ratingText.textContent = ratingTexts[currentRating];
    }

    // Initialize stars with proper ARIA attributes
    stars.forEach((star, index) => {
      star.setAttribute("role", "radio");
      star.setAttribute("aria-checked", "false");
      star.setAttribute("tabindex", "0");
      star.setAttribute("aria-label", `Rate ${index + 1} out of 5 stars`);
    });
  });
</script>

<%- include('../partials/user/footer')%>
