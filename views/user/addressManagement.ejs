<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Address Management</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <link rel="stylesheet" href="/assets/user-style/address.css" />
    <style>
        .error-message {
            color: red;
            font-size: 12px;
            margin-top: 5px;
            display: block;
            min-height: 15px;
        }
        .form-group {
            position: relative;
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <%- include('../partials/user/header')%>
    <div class="page-container">
        <aside class="sidebar">
            <nav>
                <ul class="sidebar-menu">
                    <li><a href="/userProfile">Account Overview</a></li>
                    <li><a href="/orders">Order Details</a></li>
                    <li><a href="/addressManagement" class="active">Manage Address</a></li>
                    <li><a href="/wallet">Wallet</a></li>
                    <% if (!isGoogleUser) { %>
                    <li><a href="/password">Password</a></li>
                    <% } %>
                    <li><a href="/wishlist">Wishlist</a></li>
                </ul>
            </nav>
            <button class="logout-btn" onclick="logout()">Logout</button>
        </aside>

        <main class="content">
            <div class="view-port">
                <div class="overview-grid">
                    <div class="overview-card" id="address-details">
                        <h2>Address Details</h2>
                        <% if (userAddress && userAddress.address && userAddress.address.length > 0) { %>
                        <div class="address-grid" id="address-grid">
                            <% userAddress.address.forEach((address, index) => { %>
                            <div class="address-card" data-address-id="<%= address._id %>">
                                <div class="address-info">
                                    <p><strong>Type:</strong> <%= address.addressType %></p>
                                    <p><strong>Name:</strong> <%= address.name %></p>
                                    <p><strong>City:</strong> <%= address.city %></p>
                                    <p><strong>Landmark:</strong> <%= address.landmark || 'N/A' %></p>
                                    <p><strong>District:</strong> <%= address.district %></p>
                                    <p><strong>State:</strong> <%= address.state %></p>
                                    <p><strong>Pincode:</strong> <%= address.pincode %></p>
                                    <p><strong>Phone:</strong> <%= address.phone %></p>
                                    <p><strong>Alternate Phone:</strong> <%= address.alternativePhone || 'N/A' %></p>
                                </div>
                                <div class="address-actions">
                                    <a href="/editAddress?id=<%=address._id%>" class="edit-btn">Edit</a>
                                    <button class="delete-btn" onclick="confirmDelete('<%= address._id %>')">Delete</button>
                                </div>
                            </div>
                            <% }); %>
                        </div>
                        <% } else { %>
                        <p class="no-address-message" id="no-address-message">No addresses available.</p>
                        <div class="address-grid" id="address-grid" style="display: none;"></div>
                        <% } %>
                        <button id="add-address-btn" class="add-btn">Add Address</button>
                    </div>

                    <div class="overview-card hidden" id="add-address-form-container">
                        <h3>Add New Address</h3>
                        <form id="add-address-form" method="post" novalidate>
                            <div class="form-grid">
                                <div class="form-group">
                                    <label for="address-type">Address Type:</label>
                                    <input type="text" id="address-type" name="addressType" />
                                    <span class="error-message" id="address-type-error"></span>
                                </div>
                                <div class="form-group">
                                    <label for="address-name">Name:</label>
                                    <input type="text" id="address-name" name="name" />
                                    <span class="error-message" id="name-error"></span>
                                </div>
                                <div class="form-group">
                                    <label for="address-city">City:</label>
                                    <input type="text" id="address-city" name="city" />
                                    <span class="error-message" id="city-error"></span>
                                </div>
                                <div class="form-group">
                                    <label for="address-landmark">Landmark:</label>
                                    <input type="text" id="address-landmark" name="landmark" />
                                    <span class="error-message" id="landmark-error"></span>
                                </div>
                                <div class="form-group">
                                    <label for="address-district">District:</label>
                                    <input type="text" id="address-district" name="district" />
                                    <span class="error-message" id="district-error"></span>
                                </div>
                                <div class="form-group">
                                    <label for="address-state">State:</label>
                                    <input type="text" id="address-state" name="state" />
                                    <span class="error-message" id="state-error"></span>
                                </div>
                                <div class="form-group">
                                    <label for="address-pincode">Pincode:</label>
                                    <input type="text" id="address-pincode" name="pincode" pattern="\d{6}" />
                                    <span class="error-message" id="pincode-error"></span>
                                </div>
                                <div class="form-group">
                                    <label for="address-phone">Phone:</label>
                                    <input type="tel" id="address-phone" name="phone" pattern="\d{10}" />
                                    <span class="error-message" id="phone-error"></span>
                                </div>
                                <div class="form-group full-width">
                                    <label for="address-alt-phone">Alternative Phone:</label>
                                    <input type="tel" id="address-alt-phone" name="alternativePhone" pattern="\d{10}" />
                                    <span class="error-message" id="alt-phone-error"></span>
                                </div>
                            </div>
                            <div class="form-actions">
                                <button type="submit" class="submit-btn">Save Address</button>
                                <button type="button" id="cancel-address-btn" class="cancel-btn">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <%- include('../partials/user/footer')%>
    <div class="toast-container"></div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        class ToastNotification {
            constructor() {
                this.container = document.querySelector('.toast-container');
                if (!this.container) {
                    this.container = document.createElement('div');
                    this.container.className = 'toast-container';
                    document.body.appendChild(this.container);
                }
            }

            show(message, type = 'success') {
                const toast = document.createElement('div');
                toast.className = `toast ${type}`;
                const icon = document.createElement('i');
                icon.className = `toast-icon fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-exclamation-triangle'}`;
                const textDiv = document.createElement('div');
                textDiv.textContent = message;
                toast.appendChild(icon);
                toast.appendChild(textDiv);
                this.container.appendChild(toast);
                toast.offsetHeight;
                setTimeout(() => toast.classList.add('show'), 10);
                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => this.container.removeChild(toast), 300);
                }, 3000);
            }
        }

        const toast = new ToastNotification();

        document.addEventListener("DOMContentLoaded", () => {
            const addAddressBtn = document.getElementById("add-address-btn");
            const addressDetails = document.getElementById("address-details");
            const addAddressFormContainer = document.getElementById("add-address-form-container");
            const cancelAddressBtn = document.getElementById("cancel-address-btn");

            addAddressBtn.addEventListener("click", () => {
                addressDetails.classList.add("hidden");
                addAddressFormContainer.classList.remove("hidden");
            });

            cancelAddressBtn.addEventListener("click", () => {
                addAddressFormContainer.classList.add("hidden");
                addressDetails.classList.remove("hidden");
                document.getElementById("add-address-form").reset();
                document.querySelectorAll('.error-message').forEach(error => error.textContent = '');
            });
        });

        document.getElementById("add-address-form").addEventListener("submit", async (e) => {
            e.preventDefault();
            
            document.querySelectorAll('.error-message').forEach(error => error.textContent = '');
            
            const formData = new FormData(e.target);
            const data = {
                addressType: formData.get("addressType").trim(),
                name: formData.get("name").trim(),
                city: formData.get("city").trim(),
                landmark: formData.get("landmark").trim(),
                district: formData.get("district").trim(),
                state: formData.get("state").trim(),
                pincode: formData.get("pincode").trim(),
                phone: formData.get("phone").trim(),
                alternativePhone: formData.get("alternativePhone").trim(),
            };

            let isValid = true;

            if (!data.addressType) {
                document.getElementById('address-type-error').textContent = 'Address type is required';
                isValid = false;
            } else if (!/^[A-Za-z\s]{2,}$/.test(data.addressType)) {
                document.getElementById('address-type-error').textContent = 'Address type must contain only letters and spaces, minimum 2 characters';
                isValid = false;
            }

            if (!data.name) {
                document.getElementById('name-error').textContent = 'Name is required';
                isValid = false;
            } else if (!/^[A-Za-z\s]{3,}$/.test(data.name)) {
                document.getElementById('name-error').textContent = 'Name must contain only letters and spaces, minimum 3 characters';
                isValid = false;
            }

            if (!data.city) {
                document.getElementById('city-error').textContent = 'City is required';
                isValid = false;
            } else if (!/^[A-Za-z\s]{2,}$/.test(data.city)) {
                document.getElementById('city-error').textContent = 'City must contain only letters and spaces, minimum 2 characters';
                isValid = false;
            }

            if (data.landmark && !/^[A-Za-z0-9\s]{2,}$/.test(data.landmark)) {
                document.getElementById('landmark-error').textContent = 'Landmark must be alphanumeric, minimum 2 characters';
                isValid = false;
            }

            if (!data.district) {
                document.getElementById('district-error').textContent = 'District is required';
                isValid = false;
            } else if (!/^[A-Za-z\s]{2,}$/.test(data.district)) {
                document.getElementById('district-error').textContent = 'District must contain only letters and spaces, minimum 2 characters';
                isValid = false;
            }

            if (!data.state) {
                document.getElementById('state-error').textContent = 'State is required';
                isValid = false;
            } else if (!/^[A-Za-z\s]{2,}$/.test(data.state)) {
                document.getElementById('state-error').textContent = 'State must contain only letters and spaces, minimum 2 characters';
                isValid = false;
            }

            if (!data.pincode) {
                document.getElementById('pincode-error').textContent = 'Pincode is required';
                isValid = false;
            } else if (!/^\d{6}$/.test(data.pincode)) {
                document.getElementById('pincode-error').textContent = 'Pincode must be exactly 6 digits';
                isValid = false;
            }

            if (!data.phone) {
                document.getElementById('phone-error').textContent = 'Phone number is required';
                isValid = false;
            } else if (!/^\d{10}$/.test(data.phone)) {
                document.getElementById('phone-error').textContent = 'Phone number must be exactly 10 digits';
                isValid = false;
            }

            if (data.alternativePhone && !/^\d{10}$/.test(data.alternativePhone)) {
                document.getElementById('alt-phone-error').textContent = 'Alternate phone must be exactly 10 digits';
                isValid = false;
            }

            if (isValid) {
                try {
                    const response = await fetch("/addAddress", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(data),
                    });

                    const result = await response.json();
                    if (response.ok) {
                        addAddressToGrid(result.address.address[result.address.address.length - 1]);
                        document.getElementById("add-address-form").reset();
                        document.getElementById("add-address-form-container").classList.add("hidden");
                        document.getElementById("address-details").classList.remove("hidden");
                        toast.show(result.message, "success");
                    } else {
                        toast.show(result.message, "error");
                    }
                } catch (error) {
                    toast.show("Something went wrong, please try again later", "error");
                }
            }
        });

        function addAddressToGrid(address) {
            const addressGrid = document.getElementById("address-grid");
            const noAddressMessage = document.getElementById("no-address-message");

            if (noAddressMessage) {
                noAddressMessage.style.display = "none";
                addressGrid.style.display = "block";
            }

            const addressCard = document.createElement("div");
            addressCard.className = "address-card";
            addressCard.dataset.addressId = address._id;
            addressCard.innerHTML = `
                <div class="address-info">
                    <p><strong>Type:</strong> ${address.addressType}</p>
                    <p><strong>Name:</strong> ${address.name}</p>
                    <p><strong>City:</strong> ${address.city}</p>
                    <p><strong>Landmark:</strong> ${address.landmark || 'N/A'}</p>
                    <p><strong>District:</strong> ${address.district}</p>
                    <p><strong>State:</strong> ${address.state}</p>
                    <p><strong>Pincode:</strong> ${address.pincode}</p>
                    <p><strong>Phone:</strong> ${address.phone}</p>
                    <p><strong>Alternate Phone:</strong> ${address.alternativePhone || 'N/A'}</p>
                </div>
                <div class="address-actions">
                    <a href="/editAddress?id=${address._id}" class="edit-btn">Edit</a>
                    <button class="delete-btn" onclick="confirmDelete('${address._id}')">Delete</button>
                </div>
            `;
            addressGrid.appendChild(addressCard);
        }

        async function confirmDelete(addressId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "This address will be permanently deleted!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#e74c3c',
                cancelButtonColor: '#4A90E2',
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'No, keep it'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/deleteAddress?id=${addressId}`, {
                            method: 'GET',
                        });

                        const result = await response.json();
                        if (response.ok) {
                            const addressCard = document.querySelector(`.address-card[data-address-id="${addressId}"]`);
                            if (addressCard) {
                                addressCard.remove();
                                const remainingAddresses = document.querySelectorAll(".address-card").length;
                                if (remainingAddresses === 0) {
                                    const noAddressMessage = document.getElementById("no-address-message");
                                    if (noAddressMessage) {
                                        noAddressMessage.style.display = "block";
                                    } else {
                                        const addressGrid = document.getElementById("address-grid");
                                        addressGrid.insertAdjacentHTML('beforebegin', '<p class="no-address-message" id="no-address-message">No addresses available.</p>');
                                    }
                                    document.getElementById("address-grid").style.display = "none";
                                }
                                toast.show(result.message || "Address deleted successfully", "success");
                            }
                        } else {
                            toast.show(result.message || "Failed to delete address", "error");
                        }
                    } catch (error) {
                        console.error('Delete Error:', error);
                        toast.show("Something went wrong, please try again later", "error");
                    }
                }
            });
        }

        function logout() {
            Swal.fire({
                title: 'Are you sure?',
                text: "You will be logged out of your account!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#4A90E2',
                cancelButtonColor: '#ff4444',
                confirmButtonText: 'Yes, log out!'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/logout';
                }
            });
        }

    </script>
</body>
</html>