<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Shopping Cart</title>
    <link rel="stylesheet" href="/user-style/cart.css" />
     <link
      rel="shortcut icon"
      type="image/x-icon"s
      href="assets/img/favicon.ico"
    />
      <!-- SweetAlert2 CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" />

  <!-- SweetAlert2 JS -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
      
    </style>
  </head>
  <body>
    <header><%- include('../partials/user/header')%></header>

    <main class="cart-container">
      <h1 class="cart-title">Beats Shopping Cart</h1>
      <div class="cart-content">
        <div class="cart-items">
          <% if(cart.items && cart.items.length > 0) { %> <%
          cart.items.forEach(item => { %>
          <div class="cart-item">
            <img
              src="<%= item.product.productImage[0] %>"
              alt="<%= item.product.productName %>"
            />
            <div class="item-details">
              <h3><%= item.product.productName %></h3>
              <p class="price">₹<%= item.price %></p>
              <div class="quantity">
                <label for="quantity-<%= item.product._id %>">Quantity:</label>
                <div class="quantity-control">
                  <button
                    class="quantity-btn decrease-btn"
                    data-product-id="<%= item.product._id %>"
                  >
                    -
                  </button>
                  <span
                    class="quantity-display"
                    id="quantity-<%= item.product._id %>"
                    ><%= item.quantity %></span
                  >
                  <button
                    class="quantity-btn increase-btn"
                    data-product-id="<%= item.product._id %>"
                  >
                    +
                  </button>
                </div>

                <button
                  class="remove-btn"
                  data-product-id="<%= item.product._id %>"
                >
                  Remove
                </button>
              </div>
            </div>
          </div>
          
          <% }); %> <% } else { %>
          <div class="empty-cart">
            <h2>Your cart is empty</h2>
            <p>Add items to your cart to see them here</p>
            <a href="/shop" class="continue-shopping">Continue Shopping</a>
          </div>
          <% } %>
        </div>
        
        <% if(cart.items && cart.items.length > 0) { %>
        <div class="cart-summary">
          <h2>Order Summary</h2>
          <div class="summary-item">
            <span>Subtotal:</span>
            <span>₹<%= cart.totalAmount %></span>
          </div>
          <div class="summary-item">
            <span>Delivery Charges:</span>
            <span class="free-delivery">FREE Delivery</span>
          </div>
          <div class="summary-item total">
            <span>Total:</span>
            <span>₹<%= cart.totalAmount %></span>
          </div>
          <button
            class="checkout-btn"
            onclick="window.location.href='/checkout'"
          >
            Proceed to Checkout
          </button>
        </div>
        <% } %>
        
      </div>
    </main>

    <footer><%- include('../partials/user/footer')%></footer>
  </body>
  <script>
    
   document.addEventListener("DOMContentLoaded", () => {
      const MAX_QUANTITY = 5; // Set maximum quantity limit
      const removeButtons = document.querySelectorAll(".remove-btn");
      const quantityButtons = document.querySelectorAll(".quantity-btn");

       removeButtons.forEach((button) => {
        button.addEventListener("click", async (event) => {
          const productId = event.target.getAttribute("data-product-id");
          const productName = event.target.closest('.cart-item').querySelector('h3').textContent;
          
          // Show confirmation dialog
          const result = await Swal.fire({
            title: 'Remove Item?',
            text: `Are you sure you want to remove "${productName}" from your cart?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, remove it!',
            cancelButtonText: 'No, keep it',
            reverseButtons: true
          });
          
          // If user confirms deletion
          if (result.isConfirmed) {
            try {
              // Add loading state to the button
              event.target.disabled = true;
              event.target.textContent = 'Removing...';
              
              const response = await fetch("/removeCart", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({ productId }),
              });
              
              const data = await response.json();
              
              if (data.success) {
                Swal.fire({
                  title: 'Removed!',
                  text: 'The item has been removed from your cart.',
                  icon: 'success',
                  showConfirmButton: false,
                  timer: 1500
                }).then(() => {
                  location.reload();
                });
              } else {
                Swal.fire({
                  title: "Error!",
                  text: data.message || "Failed to remove item.",
                  icon: "error",
                  confirmButtonText: "Try Again",
                });
                // Reset button state
                event.target.disabled = false;
                event.target.textContent = 'Remove';
              }
            } catch (error) {
              console.error("Error removing product:", error);
              Swal.fire({
                title: "Oops!",
                text: "Failed to remove the product from the cart. Please try again later.",
                icon: "error",
                confirmButtonText: "OK",
              });
              // Reset button state
              event.target.disabled = false;
              event.target.textContent = 'Remove';
            }
          }
        });
      });

    quantityButtons.forEach((button) => {
  button.addEventListener("click", async (event) => {
    const productId = event.target.getAttribute("data-product-id");
    const action = event.target.textContent.trim();
    const quantityDisplay = document.getElementById(`quantity-${productId}`);
    let currentQuantity = parseInt(quantityDisplay.textContent);

    // Update quantity based on action
    if (action === "+") {
      currentQuantity++;
    } else if (action === "-" && currentQuantity > 1) {
      currentQuantity--;
    } else if (currentQuantity <= 1) {
      Swal.fire({
        title: "Minimum Quantity",
        text: "Quantity must be at least 1. Use the remove button to delete the item.",
        icon: "warning",
        confirmButtonText: "OK",
      });
      return;
    }

    try {
      // Add loading state to the button
      event.target.disabled = true;
      event.target.style.opacity = "0.5";

      // Send the updated quantity to the backend
      const response = await fetch("/updateQuantity", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ productId, quantity: currentQuantity }),
      });

      const result = await response.json();

      if (response.ok && result.success) {
        // Update the quantity display
        quantityDisplay.textContent = currentQuantity;

        // Show success message
        Swal.fire({
          title: "Success!",
          text: result.message,
          icon: "success",
          confirmButtonText: "OK",
        }).then(() => {
          location.reload();
        });
      } else {
        // Show error message from backend
        Swal.fire({
          title: "Error!",
          text: result.message || "Failed to update quantity.",
          icon: "error",
          confirmButtonText: "Try Again",
        });
      }
    } catch (error) {
      console.error("Error updating quantity:", error);
      Swal.fire({
        title: "Oops!",
        text: "Failed to update quantity. Please try again later.",
        icon: "error",
        confirmButtonText: "OK",
      });
    } finally {
      // Remove loading state
      event.target.disabled = false;
      event.target.style.opacity = "1";
    }
  });
});

    });
  </script>
</html>
