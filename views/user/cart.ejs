<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Shopping Cart</title>
    <link rel="stylesheet" href="/assets/user-style/cart.css" />
     
     <link
      rel="shortcut icon"
      type="image/x-icon"s
      href="assets/img/favicon.ico"
    />
      <!-- SweetAlert2 CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" />

  <!-- SweetAlert2 JS -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
      
    </style>
  </head>
  <body>
    
  
  <div class="content">
    <header><%- include('../partials/user/header')%></header>

    <main class="cart-container">
      <h1 class="cart-title">Beats Shopping Cart</h1>
      <div class="cart-content">
        <div class="cart-items">
          <% if(cart.items && cart.items.length > 0) { %> <%
          cart.items.forEach(item => { %>
          <div class="cart-item">
            <img
              src="<%= item.product.productImage[0] %>"
              alt="<%= item.product.productName %>"
            />
            <div class="item-details">
              <h3><%= item.product.productName %></h3>
              <p class="price">₹<%= item.price %></p>
              <div class="quantity">
                <label for="quantity-<%= item.product._id %>">Quantity:</label>
                <div class="quantity-control">
                  <button
                    class="quantity-btn decrease-btn"
                    data-product-id="<%= item.product._id %>"
                  >
                    -
                  </button>
                  <span
                    class="quantity-display"
                    id="quantity-<%= item.product._id %>"
                    ><%= item.quantity %></span
                  >
                  <button
                    class="quantity-btn increase-btn"
                    data-product-id="<%= item.product._id %>"
                  >
                    +
                  </button>
                </div>

                <button
                  class="remove-btn"
                  data-product-id="<%= item.product._id %>"
                >
                  Remove
                </button>
              </div>
            </div>
          </div>
          
          <% }); %> <% } else { %>
          <div class="empty-cart">
            <h2>Your cart is empty</h2>
            <p>Add items to your cart to see them here</p>
            <a href="/shop" class="continue-shopping">Continue Shopping</a>
          </div>
          <% } %>
        </div>
        
        <% if(cart.items && cart.items.length > 0) { %>
        <div class="cart-summary">
          <h2>Order Summary</h2>
          <div class="summary-item">
            <span>Subtotal:</span>
            <span>₹<%= cart.totalAmount %></span>
          </div>
          <div class="summary-item">
            <span>Delivery Charges:</span>
            <span class="free-delivery">FREE Delivery</span>
          </div>
          <div class="summary-item total">
            <span>Total:</span>
            <span>₹<%= cart.totalAmount %></span>
          </div>
          <button
            class="checkout-btn"
            onclick="window.location.href='/checkout'"
          >
            Proceed to Checkout
          </button>
        </div>
        <% } %>
        
      </div>
    </main>
 </div>
    <footer><%- include('../partials/user/footer')%></footer>
  </body>
 
  <script>
    document.addEventListener("DOMContentLoaded", () => {
  const MAX_QUANTITY = 5;
  const removeButtons = document.querySelectorAll(".remove-btn");
  const quantityButtons = document.querySelectorAll(".quantity-btn");

  const Toast = Swal.mixin({
    toast: true,
    position: 'top-end',
    showConfirmButton: false,
    timer: 3000,
    timerProgressBar: true,
    didOpen: (toast) => {
      toast.addEventListener('mouseenter', Swal.stopTimer)
      toast.addEventListener('mouseleave', Swal.resumeTimer)
    }
  });

  removeButtons.forEach((button) => {
    button.addEventListener("click", async (event) => {
      const productId = event.target.getAttribute("data-product-id");
      const productName = event.target.closest('.cart-item').querySelector('h3').textContent;
      
      
      const result = await Swal.fire({
        title: 'Remove Item?',
        text: `Are you sure you want to remove "${productName}" from your cart?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, remove it!',
        cancelButtonText: 'No, keep it',
        reverseButtons: true
      });
      
      if (result.isConfirmed) {
        try {
          event.target.disabled = true;
          event.target.textContent = 'Removing...';
          
          const response = await fetch("/removeCart", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ productId }),
          });
          
          const data = await response.json();
          
          if (data.success) {
            Toast.fire({
              icon: 'success',
              title: 'Item removed from cart',
              background: '#ffffff',
              color: '#333333',
              iconColor: '#d33'
            }).then(() => {
              location.reload();
            });
          } else {
            Toast.fire({
              icon: 'error',
              title: data.message || 'Failed to remove item',
              background: '#ffffff',
              color: '#333333',
              iconColor: '#d33'
            });
            event.target.disabled = false;
            event.target.textContent = 'Remove';
          }
        } catch (error) {
          console.error("Error removing product:", error);
          Toast.fire({
            icon: 'error',
            title: 'Failed to remove item. Please try again',
            background: '#ffffff',
            color: '#333333',
            iconColor: '#d33'
          });
          event.target.disabled = false;
          event.target.textContent = 'Remove';
        }
      }
    });
  });

  quantityButtons.forEach((button) => {
    button.addEventListener("click", async (event) => {
      const productId = event.target.getAttribute("data-product-id");
      const action = event.target.textContent.trim();
      const quantityDisplay = document.getElementById(`quantity-${productId}`);
      let currentQuantity = parseInt(quantityDisplay.textContent);

      if (action === "+") {
        currentQuantity++;
      } else if (action === "-" && currentQuantity > 1) {
        currentQuantity--;
      } else if (currentQuantity <= 1) {
        Toast.fire({
          icon: 'warning',
          title: 'Minimum quantity must be 1',
          background: '#ffffff',
          color: '#333333',
          iconColor: '#3085d6'
        });
        return;
      }

      try {
        event.target.disabled = true;
        event.target.style.opacity = "0.5";

        const response = await fetch("/updateQuantity", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ productId, quantity: currentQuantity }),
        });

        const result = await response.json();

        if (response.ok && result.success) {
          quantityDisplay.textContent = currentQuantity;
          Toast.fire({
            icon: 'success',
            title: 'Quantity updated successfully',
            background: '#ffffff',
            color: '#333333',
            iconColor: '#3085d6'
          }).then(() => {
            location.reload();
          });
        } else {
          Toast.fire({
            icon: 'error',
            title: result.message || 'Failed to update quantity',
            background: '#ffffff',
            color: '#333333',
            iconColor: '#d33'
          });
        }
      } catch (error) {
        console.error("Error updating quantity:", error);
        Toast.fire({
          icon: 'error',
          title: 'Failed to update quantity. Please try again',
          background: '#ffffff',
          color: '#333333',
          iconColor: '#d33'
        });
      } finally {
        event.target.disabled = false;
        event.target.style.opacity = "1";
      }
    });
  });
});
  </script>
</html>
