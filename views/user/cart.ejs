<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Shopping Cart</title>
    <link rel="stylesheet" href="/assets/user-style/cart.css" />
    <link rel="shortcut icon" type="image/x-icon" href="assets/img/favicon.ico" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="icon" type="image/png" href="/assets/img/beat-logo-161616.png"> 
    
     
  </head>
  <body>
    <div class="content">
      <header><%- include('../partials/user/header')%></header>
<main class="cart-container">
  <h1 class="cart-title">Beats Shopping Cart</h1>
  <div class="cart-content">
    <div class="cart-items">
      <% if(cart.items && cart.items.length > 0) { %>
        <div class="cart-items-wrapper">
          <% cart.items.forEach(item => { %>
            <div class="cart-item">
              <img src="<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>" />
              <div class="item-details">
                <h3><%= item.product.productName %></h3>
                <p class="price">₹<%= item.price %></p>
                <div class="quantity">
                  <label for="quantity-<%= item.product._id %>">Quantity:</label>
                  <div class="quantity-control">
                    <button class="quantity-btn decrease-btn" data-product-id="<%= item.product._id %>">-</button>
                    <span class="quantity-display" id="quantity-<%= item.product._id %>"><%= item.quantity %></span>
                    <button class="quantity-btn increase-btn" data-product-id="<%= item.product._id %>">+</button>
                  </div>
                  <button class="remove-btn" data-product-id="<%= item.product._id %>">Remove</button>
                </div>
              </div>
            </div>
          <% }); %>
          
        </div>
        
      <% } else { %>
        <div class="empty-cart">
          <h2>Your cart is empty</h2>
          <p>Add items to your cart to see them here</p>
          
          <a href="/shop" class="continue-shopping">Continue Shopping</a>
        </div>
      <% } %>
    </div>
    

          
          <% if(cart.items && cart.items.length > 0) { %>
            <div class="cart-summary">
              <h2>Order Summary</h2>
              <div class="summary-item">
                <span>Subtotal:</span>
                <span class="subtotal">₹<%= cart.totalAmount %></span>
              </div>
              <div class="summary-item">
                <span>Delivery Charges:</span>
                <span class="free-delivery">FREE Delivery</span>
              </div>
              <div class="summary-item total">
                <span>Total:</span>
                <span class="total-amount">₹<%= cart.totalAmount %></span>
              </div>
              <button class="checkout-btn" onclick="window.location.href='/checkout'">
                Proceed to Checkout
              </button>
              
            </div>
          <% } %>
        </div>
      </main>
    </div>
    <div class="toast-container"></div>
    <footer><%- include('../partials/user/footer')%></footer>
  </body>
  </html>
       
  <script>
    document.addEventListener("DOMContentLoaded", () => {
  // Constants
  const MAX_QUANTITY = 5;
  
  // Elements
  const removeButtons = document.querySelectorAll(".remove-btn");
  const quantityButtons = document.querySelectorAll(".quantity-btn");
  const checkoutBtn = document.querySelector('.checkout-btn');
  
  //===== TOAST NOTIFICATION FUNCTION =====//
  // Shows a popup message to the user
  function showToast(message, type = 'success') {
    // Find the container for toast messages
    const toastContainer = document.querySelector('.toast-container');
    
    // Create a new toast message
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    
    // Select icon based on message type
    let icon = 'info-circle';
    if (type === 'success') icon = 'check-circle';
    if (type === 'error') icon = 'exclamation-circle';
    if (type === 'warning') icon = 'exclamation-triangle';
    
    // Add content to toast
    toast.innerHTML = `
      <i class="fas fa-${icon} toast-icon"></i>
      <span>${message}</span>
    `;
    
    // Add toast to container
    toastContainer.appendChild(toast);
    
    // Force browser to process the new element
    toast.offsetHeight;
    
    // Show the toast
    setTimeout(() => toast.classList.add('show'), 10);
    
    // Remove toast after 3 seconds
    setTimeout(() => {
      toast.classList.remove('show');
      setTimeout(() => toast.remove(), 300);
    }, 3000);
  }
  
  //===== PRICE FORMATTING FUNCTION =====//
  // Converts numbers to Indian Rupee format
  function formatPrice(price) {
    return parseFloat(price).toLocaleString('en-IN', {
      maximumFractionDigits: 2,
      minimumFractionDigits: 0
    });
  }
  
  //===== UPDATE PRICE SUMMARY FUNCTION =====//
  // Updates the subtotal and total in the cart summary
  function updateSummaryAmounts(newTotal) {
    const subtotalElement = document.querySelector('.subtotal');
    const totalElement = document.querySelector('.total-amount');
    
    const formattedTotal = formatPrice(newTotal);
    
    if (subtotalElement && totalElement) {
      subtotalElement.textContent = `₹${formattedTotal}`;
      totalElement.textContent = `₹${formattedTotal}`;
    }
  }
  
  //===== CART VALIDATION FUNCTION =====//
  // Checks if the cart is valid before checkout
  async function validateCart() {
    try {
      const response = await fetch('/validate-cart');
      const data = await response.json();
      
      if (!data.valid) {
        // Show each warning to the user
        data.warnings.forEach(warning => {
          showToast(warning.message, 'warning');
        });
        return false;
      }
      return true;
    } catch (error) {
      console.error('Error validating cart:', error);
      showToast('Unable to validate cart', 'error');
      return false;
    }
  }
  
  //===== REMOVE ITEM FUNCTION =====//
  // Set up event listeners for all remove buttons
  removeButtons.forEach((button) => {
    button.addEventListener("click", async (event) => {
      // Get product info
      const productId = button.getAttribute("data-product-id");
      const cartItem = button.closest('.cart-item');
      const productName = cartItem.querySelector('h3').textContent;
      
      // Show confirmation dialog
      const result = await Swal.fire({
        title: 'Remove Item?',
        text: `Are you sure you want to remove "${productName}" from your cart?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, remove it!',
        cancelButtonText: 'No, keep it',
        reverseButtons: true
      });
      
      // If user confirmed removal
      if (result.isConfirmed) {
        try {
          // Disable button and show loading state
          button.disabled = true;
          button.textContent = 'Removing...';
          
          // Send request to server
          const response = await fetch("/removeCart", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ productId }),
          });
          
          const data = await response.json();
          
          if (data.success) {
            // Remove item from DOM
            cartItem.remove();
            
            // Update cart totals
            if (data.cart && data.cart.totalAmount !== undefined) {
              updateSummaryAmounts(data.cart.totalAmount);
            }
            
            showToast('Item removed from cart', 'success');
            
            // If no items left, reload page
            const remainingItems = document.querySelectorAll('.cart-item');
            if (remainingItems.length === 0) {
              location.reload();
            }
          } else {
            showToast(data.message || 'Failed to remove item', 'error');
            button.disabled = false;
            button.textContent = 'Remove';
          }
        } catch (error) {
          console.error("Error removing product:", error);
          showToast('Failed to remove item. Please try again', 'error');
          button.disabled = false;
          button.textContent = 'Remove';
        }
      }
    });
  });
  
  //===== QUANTITY UPDATE FUNCTION =====//
  // Set up event listeners for all quantity buttons
  quantityButtons.forEach((button) => {
    button.addEventListener("click", async (event) => {
      // Get product info and action type
      const productId = button.getAttribute("data-product-id");
      const action = button.classList.contains('increase-btn') ? '+' : '-';
      const quantityDisplay = document.getElementById(`quantity-${productId}`);
      let currentQuantity = parseInt(quantityDisplay.textContent);

      // Increase or decrease quantity
      if (action === "+") {
        if (currentQuantity >= MAX_QUANTITY) {
          showToast(`Maximum quantity allowed is ${MAX_QUANTITY}`, 'warning');
          return;
        }
        currentQuantity++;
      } else if (action === "-") {
        if (currentQuantity <= 1) {
          showToast('Minimum quantity must be 1', 'warning');
          return;
        }
        currentQuantity--;
      }

      try {
        // Show loading state
        button.disabled = true;
        button.style.opacity = "0.5";

        // Send request to server
        const response = await fetch("/updateQuantity", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ productId, quantity: currentQuantity }),
        });

        const result = await response.json();

        if (response.ok && result.success) {
          // Update display
          quantityDisplay.textContent = currentQuantity;
          
          // Update cart totals
          if (result.cart && result.cart.totalAmount !== undefined) {
            updateSummaryAmounts(result.cart.totalAmount);
          }
          
          showToast('Quantity updated successfully', 'success');
        } else {
          showToast(result.message || 'Failed to update quantity', 'error');
        }
      } catch (error) {
        console.error("Error updating quantity:", error);
        showToast('Failed to update quantity. Please try again', 'error');
      } finally {
        // Restore button state
        button.disabled = false;
        button.style.opacity = "1";
      }
    });
  });
  
  //===== CHECKOUT BUTTON FUNCTION =====//
  // Set up event listener for checkout button
  if (checkoutBtn) {
    checkoutBtn.addEventListener('click', async function(e) {
      e.preventDefault();
      // Validate cart before proceeding to checkout
      const isValid = await validateCart();
      if (isValid) {
        window.location.href = '/checkout';
      }
    });
  }
});
  </script>

