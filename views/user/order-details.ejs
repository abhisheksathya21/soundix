<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details - Adidas</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="shortcut icon" type="image/x-icon" href="assets/img/favicon.ico" />
    <link rel="stylesheet" href="/assets/user-style/orders.css">
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

</head>
<body>
    <%- include('../partials/user/header') %>

    <div class="page-container">
        <aside class="sidebar">
            <nav>
                <ul class="sidebar-menu">
                    <li><a href="/userProfile">Account Overview</a></li>
                    <li><a href="/orders" class="active">Order Details</a></li>
                    <li><a href="/addressManagement">Manage Address</a></li>
                    <li><a href="/wallet">Wallet</a></li>
                    <% if (!isGoogleUser) { %>
                        <li><a href="/password">Password</a></li>
                    <% } %>
                    <li><a href="/wishlist">Wishlist</a></li>
                </ul>
            </nav>
            <button class="logout-btn" onclick="logout()">Logout</button>
        </aside>

        <main class="content">
            <div class="view-port">
                <div class="container" id="orders-container">
                    <h1>Order Details</h1>
                    <!-- Orders will be dynamically added here -->
                </div>
                <div class="pagination-container mt-4">
                    <% if (currentPage > 1) { %>
                        <a href="?page=1" class="pagination-link">First</a>
                        <a href="?page=<%= currentPage - 1 %>" class="pagination-link">« Previous</a>
                    <% } %>
                    <% for (let i = 1; i <= totalPages; i++) { %>
                        <% if (i === currentPage) { %>
                            <span class="current-page"><%= i %></span>
                        <% } else { %>
                            <a href="?page=<%= i %>" class="pagination-link"><%= i %></a>
                        <% } %>
                    <% } %>
                    <% if (currentPage < totalPages) { %>
                        <a href="?page=<%= currentPage + 1 %>" class="pagination-link">Next »</a>
                        <a href="?page=<%= totalPages %>" class="pagination-link">Last</a>
                    <% } %>
                </div>
            </div>
        </main>
    </div>

    <%- include('../partials/user/footer') %>

    <div class="toast-container"></div>
    <script>
        const orders = <%- JSON.stringify(orders) %>;
        const user = <%- JSON.stringify(user) %>;

        class ToastNotification {
            constructor() {
                this.container = document.querySelector('.toast-container');
                if (!this.container) {
                    this.container = document.createElement('div');
                    this.container.className = 'toast-container';
                    document.body.appendChild(this.container);
                }
            }

            show(message, type = 'success') {
                const toast = document.createElement('div');
                toast.className = `toast ${type}`;
                const icon = document.createElement('i');
                icon.className = `toast-icon fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-exclamation-triangle'}`;
                const textDiv = document.createElement('div');
                textDiv.textContent = message;
                toast.appendChild(icon);
                toast.appendChild(textDiv);
                this.container.appendChild(toast);
                toast.offsetHeight;
                setTimeout(() => toast.classList.add('show'), 10);
                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => this.container.removeChild(toast), 300);
                }, 3000);
            }
        }

        const toast = new ToastNotification();

        async function cancelOrder(orderId) {
            try {
                const reasonResponse = await new Promise((resolve) => {
                    let selectedReason = '';
                    Swal.fire({
                        title: '<span style="font-size: 24px; font-weight: 600;">Cancel Order</span>',
                        html: `
                            <div style="margin-bottom: 20px;">
                                <p style="color: #666; margin-bottom: 15px;">Please select a reason for cancellation</p>
                                <select id="reason-select" class="swal2-select" style="
                                    width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 8px;
                                    background-color: #f8f9fa; font-size: 14px; color: #333;
                                    margin-bottom: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.05); transition: all 0.3s ease;">
                                    <option value="">Select a reason</option>
                                    <option value="Changed my mind">Changed my mind</option>
                                    <option value="Found better price elsewhere">Found better price elsewhere</option>
                                    <option value="Ordered by mistake">Ordered by mistake</option>
                                    <option value="Delivery time too long">Delivery time too long</option>
                                    <option value="Payment issues">Payment issues</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                        `,
                        showCancelButton: true,
                        confirmButtonText: 'Continue',
                        cancelButtonText: 'Back',
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        customClass: { popup: 'swal-wide', confirmButton: 'swal2-confirm-custom', cancelButton: 'swal2-cancel-custom' },
                        preConfirm: () => {
                            const reason = document.getElementById('reason-select').value;
                            if (!reason) {
                                Swal.showValidationMessage('Please select a reason for cancellation');
                                return false;
                            }
                            return reason;
                        }
                    }).then((result) => {
                        resolve(result.value || null);
                    });
                });

                if (!reasonResponse) return;

                let finalReason = reasonResponse;
                if (reasonResponse === 'Other') {
                    const customReasonResponse = await new Promise((resolve) => {
                        Swal.fire({
                            title: '<span style="font-size: 24px; font-weight: 600;">Specify Reason</span>',
                            html: `
                                <div style="margin-bottom: 20px;">
                                    <textarea id="custom-reason" class="swal2-textarea" 
                                        placeholder="Please provide details about your cancellation reason..."
                                        style="width: 100%; min-height: 100px; padding: 12px; border: 1px solid #ddd;
                                        border-radius: 8px; background-color: #f8f9fa; font-size: 14px; color: #333;
                                        resize: vertical; box-shadow: 0 2px 4px rgba(0,0,0,0.05);"></textarea>
                                </div>
                            `,
                            showCancelButton: true,
                            confirmButtonText: 'Submit',
                            cancelButtonText: 'Back',
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            preConfirm: () => {
                                const customReason = document.getElementById('custom-reason').value;
                                if (!customReason.trim()) {
                                    Swal.showValidationMessage('Please provide a reason');
                                    return false;
                                }
                                return customReason;
                            }
                        }).then((result) => {
                            resolve(result.value || null);
                        });
                    });

                    if (!customReasonResponse) return;
                    finalReason = customReasonResponse;
                }

                const confirmation = await Swal.fire({
                    title: '<span style="font-size: 24px; font-weight: 600;">Confirm Cancellation</span>',
                    html: `
                        <div style="margin: 20px 0;">
                            <p style="color: #666; margin-bottom: 15px;">Are you sure you want to cancel this order?</p>
                            <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: left;">
                                <p style="margin: 0; color: #333;"><strong>Reason:</strong> ${finalReason}</p>
                            </div>
                            <p style="color: #dc3545; font-size: 12px; margin-top: 15px;">This action cannot be undone</p>
                        </div>
                    `,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, cancel order',
                    cancelButtonText: 'No, keep order',
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    customClass: { popup: 'swal-wide' }
                });

                if (!confirmation.isConfirmed) return;

                const response = await fetch(`/api/orders/${orderId}/cancel`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ reason: finalReason })
                });

                const result = await response.json();
                if (response.ok) {
                    const orderIndex = orders.findIndex(o => o.id === orderId);
                    if (orderIndex !== -1) {
                        orders[orderIndex].status = 'Cancelled';
                        orders[orderIndex].products.forEach(product => product.status = 'Cancelled');
                        const orderCard = document.querySelector(`[data-order-id="${orderId}"]`);
                        if (orderCard) orderCard.replaceWith(createOrderCard(orders[orderIndex]));
                    }
                    toast.show('Order cancelled successfully!', 'success');
                } else {
                    throw new Error(result.message || 'Failed to cancel the order');
                }
            } catch (error) {
                console.error('Error cancelling order:', error);
                toast.show(error.message || 'Something went wrong while cancelling the order.', 'error');
            }
        }

        async function cancelOrderProduct(orderId, productId) {
            try {
                const reasonResponse = await new Promise((resolve) => {
                    let selectedReason = '';
                    Swal.fire({
                        title: '<span style="font-size: 24px; font-weight: 600;">Cancel Product</span>',
                        html: `
                            <div style="margin-bottom: 20px;">
                                <p style="color: #666; margin-bottom: 15px;">Please select a reason for cancelling this product</p>
                                <select id="reason-select" class="swal2-select" style="
                                    width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 8px;
                                    background-color: #f8f9fa; font-size: 14px; color: #333;
                                    margin-bottom: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.05); transition: all 0.3s ease;">
                                    <option value="">Select a reason</option>
                                    <option value="Changed my mind">Changed my mind</option>
                                    <option value="Found better price elsewhere">Found better price elsewhere</option>
                                    <option value="Ordered by mistake">Ordered by mistake</option>
                                    <option value="Delivery time too long">Delivery time too long</option>
                                    <option value="Payment issues">Payment issues</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                        `,
                        showCancelButton: true,
                        confirmButtonText: 'Continue',
                        cancelButtonText: 'Back',
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        customClass: { popup: 'swal-wide', confirmButton: 'swal2-confirm-custom', cancelButton: 'swal2-cancel-custom' },
                        preConfirm: () => {
                            const reason = document.getElementById('reason-select').value;
                            if (!reason) {
                                Swal.showValidationMessage('Please select a reason for cancellation');
                                return false;
                            }
                            return reason;
                        }
                    }).then((result) => {
                        resolve(result.value || null);
                    });
                });

                if (!reasonResponse) return;

                let finalReason = reasonResponse;
                if (reasonResponse === 'Other') {
                    const customReasonResponse = await new Promise((resolve) => {
                        Swal.fire({
                            title: '<span style="font-size: 24px; font-weight: 600;">Specify Reason</span>',
                            html: `
                                <div style="margin-bottom: 20px;">
                                    <textarea id="custom-reason" class="swal2-textarea" 
                                        placeholder="Please provide details about your cancellation reason..."
                                        style="width: 100%; min-height: 100px; padding: 12px; border: 1px solid #ddd;
                                        border-radius: 8px; background-color: #f8f9fa; font-size: 14px; color: #333;
                                        resize: vertical; box-shadow: 0 2px 4px rgba(0,0,0,0.05);"></textarea>
                                </div>
                            `,
                            showCancelButton: true,
                            confirmButtonText: 'Submit',
                            cancelButtonText: 'Back',
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            preConfirm: () => {
                                const customReason = document.getElementById('custom-reason').value;
                                if (!customReason.trim()) {
                                    Swal.showValidationMessage('Please provide a reason');
                                    return false;
                                }
                                return customReason;
                            }
                        }).then((result) => {
                            resolve(result.value || null);
                        });
                    });

                    if (!customReasonResponse) return;
                    finalReason = customReasonResponse;
                }

                const confirmation = await Swal.fire({
                    title: '<span style="font-size: 24px; font-weight: 600;">Confirm Product Cancellation</span>',
                    html: `
                        <div style="margin: 20px 0;">
                            <p style="color: #666; margin-bottom: 15px;">Are you sure you want to cancel this product from your order?</p>
                            <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: left;">
                                <p style="margin: 0; color: #333;"><strong>Reason:</strong> ${finalReason}</p>
                            </div>
                            <p style="color: #dc3545; font-size: 12px; margin-top: 15px;">This action cannot be undone</p>
                        </div>
                    `,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, cancel product',
                    cancelButtonText: 'No, keep product',
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    customClass: { popup: 'swal-wide' }
                });

                if (!confirmation.isConfirmed) return;

                const response = await fetch('/admin/cancel-order-product', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orderId, productId, reason: finalReason })
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.message || 'Failed to cancel product');
                }

                const orderIndex = orders.findIndex(o => o.id === orderId);
                if (orderIndex !== -1) {
                    const productIndex = orders[orderIndex].products.findIndex(p => p.productId === productId);
                    if (productIndex !== -1) {
                        orders[orderIndex].products[productIndex].status = 'Cancelled';
                        const activeProducts = orders[orderIndex].products.filter(p => p.status !== 'Cancelled');
                        orders[orderIndex].total = activeProducts.reduce((sum, p) => sum + (p.price * p.quantity), 0);
                        if (activeProducts.length === 0) {
                            orders[orderIndex].status = 'Cancelled';
                        }
                        const orderCard = document.querySelector(`[data-order-id="${orderId}"]`);
                        if (orderCard) {
                            orderCard.replaceWith(createOrderCard(orders[orderIndex]));
                        }
                    }
                }

                toast.show('Product cancelled successfully!', 'success');
            } catch (error) {
                console.error('Error cancelling product:', error);
                toast.show(error.message || 'Unable to cancel the product', 'error');
            }
        }

        async function returnOrderProduct(orderId, productId) {
            try {
                const reasonResponse = await new Promise((resolve) => {
                    let selectedReason = '';
                    Swal.fire({
                        title: '<span style="font-size: 24px; font-weight: 600;">Return Product</span>',
                        html: `
                            <div style="margin-bottom: 20px;">
                                <p style="color: #666; margin-bottom: 15px;">Please select a reason for returning this product</p>
                                <select id="reason-select" class="swal2-select" style="
                                    width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 8px;
                                    background-color: #f8f9fa; font-size: 14px; color: #333;
                                    margin-bottom: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.05); transition: all 0.3s ease;">
                                    <option value="">Select a reason</option>
                                    <option value="Damaged Product">Damaged Product</option>
                                    <option value="Wrong Size">Wrong Size</option>
                                    <option value="Defective Item">Defective Item</option>
                                    <option value="Not as Described">Not as Described</option>
                                    <option value="Changed Mind">Changed Mind</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                        `,
                        showCancelButton: true,
                        confirmButtonText: 'Continue',
                        cancelButtonText: 'Back',
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        customClass: { popup: 'swal-wide', confirmButton: 'swal2-confirm-custom', cancelButton: 'swal2-cancel-custom' },
                        preConfirm: () => {
                            const reason = document.getElementById('reason-select').value;
                            if (!reason) {
                                Swal.showValidationMessage('Please select a reason for return');
                                return false;
                            }
                            return reason;
                        }
                    }).then((result) => {
                        resolve(result.value || null);
                    });
                });

                if (!reasonResponse) return;

                let finalReason = reasonResponse;
                if (reasonResponse === 'Other') {
                    const customReasonResponse = await new Promise((resolve) => {
                        Swal.fire({
                            title: '<span style="font-size: 24px; font-weight: 600;">Specify Reason</span>',
                            html: `
                                <div style="margin-bottom: 20px;">
                                    <textarea id="custom-reason" class="swal2-textarea" 
                                        placeholder="Please provide details about your return reason..."
                                        style="width: 100%; min-height: 100px; padding: 12px; border: 1px solid #ddd;
                                        border-radius: 8px; background-color: #f8f9fa; font-size: 14px; color: #333;
                                        resize: vertical; box-shadow: 0 2px 4px rgba(0,0,0,0.05);"></textarea>
                                </div>
                            `,
                            showCancelButton: true,
                            confirmButtonText: 'Submit',
                            cancelButtonText: 'Back',
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            preConfirm: () => {
                                const customReason = document.getElementById('custom-reason').value;
                                if (!customReason.trim()) {
                                    Swal.showValidationMessage('Please provide a reason');
                                    return false;
                                }
                                return customReason;
                            }
                        }).then((result) => {
                            resolve(result.value || null);
                        });
                    });

                    if (!customReasonResponse) return;
                    finalReason = customReasonResponse;
                }

                const confirmation = await Swal.fire({
                    title: '<span style="font-size: 24px; font-weight: 600;">Confirm Product Return</span>',
                    html: `
                        <div style="margin: 20px 0;">
                            <p style="color: #666; margin-bottom: 15px;">Are you sure you want to return this product?</p>
                            <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: left;">
                                <p style="margin: 0; color: #333;"><strong>Reason:</strong> ${finalReason}</p>
                            </div>
                            <p style="color: #dc3545; font-size: 12px; margin-top: 15px;">This will send a return request to admin</p>
                        </div>
                    `,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, return product',
                    cancelButtonText: 'No, keep product',
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    customClass: { popup: 'swal-wide' }
                });

                if (!confirmation.isConfirmed) return;

                const response = await fetch('/api/orders/return-product', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orderId, productId, reason: finalReason })
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.message || 'Failed to submit return request');
                }

                const orderIndex = orders.findIndex(o => o.id === orderId);
                if (orderIndex !== -1) {
                    const productIndex = orders[orderIndex].products.findIndex(p => p.productId === productId);
                    if (productIndex !== -1) {
                        orders[orderIndex].products[productIndex].status = 'Return Requested';
                    }
                    const orderCard = document.querySelector(`[data-order-id="${orderId}"]`);
                    if (orderCard) {
                        orderCard.replaceWith(createOrderCard(orders[orderIndex]));
                    }
                }

                toast.show('Return request submitted successfully!', 'success');
            } catch (error) {
                console.error('Error submitting return request:', error);
                toast.show(error.message || 'Unable to submit return request', 'error');
            }
        }

        async function retryPayment(orderId) {
            try {
                const confirmation = await Swal.fire({
                    title: '<span style="font-size: 24px; font-weight: 600;">Retry Payment</span>',
                    text: 'Do you want to retry the payment for this order?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, Retry',
                    cancelButtonText: 'No',
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                });

                if (!confirmation.isConfirmed) return;

                const response = await fetch('/retry-payment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orderId }),
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.error || 'Failed to initiate payment retry');
                }

                let paymentFailed = false;
                const options = {
                    key: data.key_id,
                    amount: data.amount,
                    currency: data.currency,
                    name: "Adidas Store",
                    description: "Order Payment Retry",
                    order_id: data.orderId,
                    handler: async function (response) {
                        console.log("Razorpay response:", response);
                        const verifyResponse = await fetch('/verify-payment', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_signature: response.razorpay_signature,
                                internalOrderId: data.internalOrderId,
                            }),
                        });
                        const verifyData = await verifyResponse.json();
                        console.log("Verify payment response:", verifyData);

                        if (verifyData.success) {
                            const orderIndex = orders.findIndex(o => o.id === orderId);
                            if (orderIndex !== -1) {
                                orders[orderIndex].paymentStatus = 'Paid';
                                const orderCard = document.querySelector(`[data-order-id="${orderId}"]`);
                                if (orderCard) {
                                    orderCard.replaceWith(createOrderCard(orders[orderIndex]));
                                }
                            }
                            toast.show('Payment successful!', 'success');
                        } else {
                            toast.show(verifyData.error || 'Payment verification failed', 'error');
                        }
                    },
                    modal: {
                        ondismiss: function () {
                            console.log("Razorpay modal dismissed for order:", data.internalOrderId);
                            setTimeout(() => {
                                fetch('/payment-dismissed', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ internalOrderId: data.internalOrderId }),
                                })
                                .then(response => response.json())
                                .then(dismissData => {
                                    console.log("Dismiss payment response:", dismissData);
                                    toast.show(
                                        paymentFailed 
                                            ? (dismissData.message || 'Payment failed. You can retry again.') 
                                            : (dismissData.message || 'Payment cancelled. You can retry again.'),
                                        paymentFailed ? 'error' : 'warning'
                                    );
                                })
                                .catch(error => {
                                    console.error("Dismiss payment fetch error:", error);
                                    toast.show('Error updating payment status', 'error');
                                });
                            }, 500);
                        },
                    },
                    prefill: {
                        name: user.fullname,
                        email: user.email,
                        contact: user.phone || orders.find(o => o.id === orderId).shippingAddress.phone,
                    },
                    theme: { color: "#3399cc" },
                };

                const rzp = new Razorpay(options);
                rzp.on('payment.failed', function (response) {
                    console.log("Razorpay payment failed for order:", data.internalOrderId, response);
                    paymentFailed = true;
                });
                rzp.open();
            } catch (error) {
                console.error("Retry payment error:", error);
                toast.show(error.message || 'An error occurred while retrying payment', 'error');
            }
        }

        function createOrderCard(order) {
            const orderCard = document.createElement('div');
            orderCard.className = 'order-card';
            orderCard.setAttribute('data-order-id', order.id);

            const isDelivered = order.status === 'Delivered';
            const canCancel = order.status === 'Pending' || order.status === 'Processing';
            const canRetryPayment = order.paymentMethod === 'Razorpay' && 
                                    (order.paymentStatus === 'Pending' || order.paymentStatus === 'Failed');

            orderCard.innerHTML = `
                <div class="order-header">
                    <span class="order-number">${order.id}</span>
                    <span class="order-status">${order.status}</span>
                </div>
                <div class="order-info">
                    <div>
                        <p><strong>Order Date:</strong> ${order.date}</p>
                        <p><strong>Payment Method:</strong> ${order.paymentMethod}</p>
                        <p><strong>Payment Status:</strong> ${order.paymentStatus}</p>
                        <p><strong>Shipping Address:</strong></p>
                        <p>${order.shippingAddress.name}</p>
                        <p>${order.shippingAddress.address}</p>
                        <p>${order.shippingAddress.phone}</p>
                    </div>
                    <div>
                        <p><strong>Shipping Method:</strong> ${order.shippingMethod}</p>
                        <p><strong>Total Items:</strong> ${order.products.reduce((sum, product) => 
                            product.status !== 'Cancelled' ? sum + product.quantity : sum, 0)}</p>
                    </div>
                </div>
                <div class="order-total">Total: ₹${order.total.toFixed(2)}</div>
                ${canCancel && !order.products.every(p => p.status === 'Cancelled') ? 
                    `<button class="cancel-order-btn" onclick="cancelOrder('${order.id}')">Cancel Order</button>` : ''}
                ${canRetryPayment ? 
                    `<button class="retry-payment-btn" onclick="retryPayment('${order.id}')">Retry Payment</button>` : ''}
                <button class="download-invoice-btn" onclick="downloadInvoice('${order.id}')">Download Invoice</button>
                <button class="view-products">View Products</button>
                <div class="product-list">
                    ${order.products.map(product => `
                        <div class="product-item ${product.status === 'Cancelled' ? 'cancelled-product' : ''}">
                            <img src="${product.image}" alt="${product.name}" class="product-image">
                            <div class="product-details">
                                <div class="product-header">
                                    <p class="product-name">${product.name}</p>
                                    <span class="order-status ${product.status.toLowerCase()}">${product.status}</span>
                                </div>
                                <span class="product-quantity">Qty: ${product.quantity}</span>
                                <p class="product-price">₹${product.price}</p>
                                ${canCancel && product.status !== 'Cancelled' ? 
                                    `<button class="cancel-product-btn" onclick="cancelOrderProduct('${order.id}', '${product.productId}')">
                                        Cancel Product
                                    </button>` : ''}
                                ${isDelivered && product.status === 'Delivered' ? 
                                    `<button class="return-product-btn" onclick="returnOrderProduct('${order.id}', '${product.productId}')">
                                        Return Product
                                    </button>` : ''}
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;

            const viewProductsBtn = orderCard.querySelector('.view-products');
            const productList = orderCard.querySelector('.product-list');
            viewProductsBtn.addEventListener('click', () => {
                productList.style.display = productList.style.display === 'none' ? 'block' : 'none';
                viewProductsBtn.textContent = productList.style.display === 'none' ? 'View Products' : 'Hide Products';
            });

            return orderCard;
        }

        async function downloadInvoice(orderId) {
            try {
                const confirmation = await Swal.fire({
                    title: 'Download Invoice',
                    text: `Do you want to download the invoice for order ${orderId}?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, Download',
                    cancelButtonText: 'No',
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#d33'
                });

                if (!confirmation.isConfirmed) return;

                // Redirect to the backend endpoint to download the PDF
                window.location.href = `/api/orders/${orderId}/invoice-pdf`;
                toast.show('Invoice downloaded successfully!', 'success');
            } catch (error) {
                console.error('Error downloading invoice:', error);
                toast.show('Failed to download invoice', 'error');
            }
        }

        function logout() {
            Swal.fire({
                title: 'Are you sure?',
                text: "You will be logged out of your account!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#4A90E2',
                cancelButtonColor: '#ff4444',
                confirmButtonText: 'Yes, log out!'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/logout';
                }
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            const ordersContainer = document.getElementById('orders-container');
            orders.forEach(order => ordersContainer.appendChild(createOrderCard(order)));
        });
    </script>
</body>
</html>