<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details - Adidas</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  
     <link rel="stylesheet" href="/assets/user-style/sidebar.css">
     <link rel="stylesheet" href="/assets/user-style/orders.css">
    <link rel="shortcut icon" type="image/x-icon" href="assets/img/favicon.ico" />
</head>
<body>
    <%-include('../partials/user/header')%>
      <input type="checkbox" id="sidebar-toggle" />
    <label for="sidebar-toggle" class="sidebar-toggle-label">☰</label>

   <aside class="sidebar">
  <nav>
    <ul class="sidebar-menu">
      <li><a href="/userProfile" >Account Overview</a></li>
      <li><a href="/orders" class="active">Order Details</a></li>
      <li><a href="/addressManagement">Manage Address</a></li>
      <li><a href="/wallet">Wallet</a></li>
      <% if (!isGoogleUser) { %>
        <li><a href="/password">Password</a></li>
      <% } %>
      <li><a href="/wishlist">Wishlist</a></li>
    </ul>
  </nav>
  <button class="logout-btn">Logout</button>
</aside>


       
    
    
       <main class="content">
      <!-- Your page content goes here -->
      <div class="view-port">
        
       <div class="container" id="orders-container">
          <h1>Order details</h1>
            <!-- Orders will be dynamically added here -->
        </div>
         <div class="pagination-container mt-4">
  <% if (currentPage > 1) { %>
    <a href="?page=1" class="pagination-link">First</a>
    <a href="?page=<%= currentPage - 1 %>" class="pagination-link">&laquo; Previous</a>
  <% } %>
  <% for (let i = 1; i <= totalPages; i++) { %>
    <% if (i === currentPage) { %>
      <span class="current-page"><%= i %></span>
    <% } else { %>
      <a href="?page=<%= i %>" class="pagination-link"><%= i %></a>
    <% } %>
  <% } %>
  <% if (currentPage < totalPages) { %>
    <a href="?page=<%= currentPage + 1 %>" class="pagination-link">Next &raquo;</a>
    <a href="?page=<%= totalPages %>" class="pagination-link">Last</a>
  <% } %>
</div>
        </div>
         
       </main>
   

     
    
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
       const orders = <%- JSON.stringify(orders) %>;

async function cancelOrder(orderId) {
    try {
        // Show a confirmation dialog before canceling
        const confirmation = await Swal.fire({
            title: 'Are you sure?',
            text: 'Do you really want to cancel this order? This action cannot be undone.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!',
        });

        if (confirmation.isConfirmed) {
            const response = await fetch(`/api/orders/${orderId}/cancel`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            if (response.ok) {
                Swal.fire({
                    title: 'Cancelled!',
                    text: 'Your order has been cancelled successfully.',
                    icon: 'success',
                }).then(() => {
                    location.reload(); // Refresh the page to show updated status
                });
            } else {
                const errorData = await response.json();
                Swal.fire({
                    title: 'Failed!',
                    text: errorData.message || 'Failed to cancel the order. Please try again later.',
                    icon: 'error',
                });
            }
        }
    } catch (error) {
        console.error('Error cancelling order:', error);
        Swal.fire({
            title: 'Error!',
            text: 'Something went wrong while cancelling the order.',
            icon: 'error',
        });
    }
}

    async function cancelProduct(orderId, productId) {
    try {
        const confirmation = await Swal.fire({
            title: 'Are you sure?',
            text: 'Do you really want to cancel this product from the order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!'
        });

        if (confirmation.isConfirmed) {
            const response = await fetch(`/api/orders/${orderId}/product/${productId}/cancel`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                await Swal.fire({
                    title: 'Success!',
                    text: 'Product cancelled successfully',
                    icon: 'success'
                });
                location.reload();
            } else {
                const errorData = await response.json();
                Swal.fire({
                    title: 'Failed!',
                    text: errorData.message || 'Failed to cancel the product',
                    icon: 'error'
                });
            }
        }
    } catch (error) {
        Swal.fire({
            title: 'Error!',
            text: 'Something went wrong while cancelling the product',
            icon: 'error'
        });
    }
}  

async function cancelOrderProduct(orderId, productId) {
    try {
       
        const result = await Swal.fire({
            title: 'Cancel Product from Order',
            text: "Are you sure you want to remove this product from the order? This will adjust the order total.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, cancel product'
        });

        if (!result.isConfirmed) {
            return;
        }

        // Send request to backend to cancel specific product
        const response = await fetch('/admin/cancel-order-product', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
                orderId: orderId, 
                productId: productId 
            })
        });

        const data = await response.json();

        if (!response.ok) {
            throw new Error(data.message || 'Failed to cancel product');
        }

        // Success notification
        await Swal.fire({
            icon: 'success',
            title: 'Product Cancelled',
            text: 'The product has been removed from the order.',
            timer: 2000,
            showConfirmButton: false
        });

        // Optionally refresh the page or update the view
        location.reload();

    } catch (error) {
        console.error('Error cancelling product:', error);
        Swal.fire({
            icon: 'error',
            title: 'Cancellation Failed',
            text: error.message || 'Unable to cancel the product'
        });
    }
}
     function createOrderCard(order) {
    const orderCard = document.createElement('div');
    orderCard.className = 'order-card';

    const canCancel = order.status === 'Pending' || order.status === 'Processing';

    orderCard.innerHTML = `
        <div class="order-header">
            <span class="order-number">${order.id}</span>
            <span class="order-status">${order.status}</span>
        </div>
        <div class="order-info">
            <div>
                <p><strong>Order Date:</strong> ${order.date}</p>
                <p><strong>Payment Method:</strong> ${order.paymentMethod}</p>
            </div>
            <div>
                <p><strong>Shipping Method:</strong> ${order.shippingMethod}</p>
                <p><strong>Total Items:</strong> ${order.products.reduce((sum, product) => 
                    product.status !== 'Cancelled' ? sum + product.quantity : sum, 0)}</p>
            </div>
        </div>
        <div class="order-total">Total: ₹${order.total.toFixed(2)}</div>
        ${canCancel && !order.products.every(p => p.status === 'Cancelled') ? 
            `<button class="cancel-order-btn" onclick="cancelOrder('${order.id}')">Cancel Order</button>` : ''}
        <button class="view-products">View Products</button>
        <div class="product-list">
            
            ${order.products.map(product => `
                <div class="product-item ${product.status === 'Cancelled' ? 'cancelled-product' : ''}">
                    <img src="${product.image}" alt="${product.name}" class="product-image">
                    <div class="product-details">
                        <div class="product-header">
                            <p class="product-name">${product.name}</p>
                            <span class="order-status ${product.status.toLowerCase()}">${product.status}</span>
                        </div>
                         <span class="product-quantity">Qty: ${product.quantity}</span>
                        <p class="product-price">₹${product.price} </p>
                        
                        ${canCancel && product.status !== 'Cancelled' ? 
                            `<button class="cancel-product-btn" onclick="cancelOrderProduct('${order.id}', '${product.productId}')">
                                Cancel Product
                            </button>` : ''}
                    </div>
                </div>
            `).join('')}
        </div>
    `;

    const viewProductsBtn = orderCard.querySelector('.view-products');
    const productList = orderCard.querySelector('.product-list');
    viewProductsBtn.addEventListener('click', () => {
        productList.style.display = productList.style.display === 'none' ? 'block' : 'none';
        viewProductsBtn.textContent = productList.style.display === 'none' ? 'View Products' : 'Hide Products';
    });

    return orderCard;
}
        document.addEventListener('DOMContentLoaded', () => {
            const ordersContainer = document.getElementById('orders-container');
            orders.forEach(order => ordersContainer.appendChild(createOrderCard(order)));
        });
    </script>
   
   
</body>
</html>
<%-include('../partials/user/footer')%>